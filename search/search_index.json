{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Extend the Enterprise WAN to the AWS Cloud: A first-hand deployment experience using Ansible LTRXAR-2001 Speakers Kyle Barnes \u2013 CX Architect, Praveen Poojary \u2013 CX Architect, Navin Suvarna \u2013 CX Architect About this lab Lab Introduction We\u2019d like to introduce you to a simple SD-WAN deployment: One single border router. In this lab the Viptela vManage, vSmart, vBond, and border router bring up sequence has already been completed. We have two hosts, a windows jumpbox and a linux host, that we\u2019ll leverage to provision our AWS account and execute our Ansible playbooks, respectively. We\u2019ve already deployed Ansible on the Linux host so we\u2019re ready to dive into two very unique scenarios. Lab Flow In this lab, you will follow the lab guide on the scenarios below: Scenario 1: We\u2019ll explore the topics of Viptela device vs feature templates, Explore Ansible roles, Jinja2 templates, modules, etc. We\u2019ll then leverage existing templates to reverse engineer the template structure to create our own! Scenario 2: Here we\u2019ll leverage a lab AWS environment to deploy Viptela\u2019s Cloud OnRamp for Multicloud using Ansible playbooks. While most (all) of the playbooks used in this section are URI post/get calls, the outcome of this scenario is a deeper understanding of the APIs/Config Options available & used during the OnRamp process. Lab Access Below table provides the IP addresses and credentials for the devices used in this lab: Note: You are able to access all devices via SSH and GUI after AnyConnect into dCloud. There is no remote desktop or any jump server required to access the lab. If you don't have AnyConnect VPN Client installed, you can download AnyConnect from here https://developer.cisco.com/site/devnet/sandbox/anyconnect/ Lab Topology (Remember when we said \u201cVERY small SD-WAN deployment?) Learning Objectives Upon completion of this lab, you will be able to understand the following: \u2022 Viptela SD-WAN device vs feature templates \u2022 Understand basic Ansible structure (playbooks, roles, variables, modules) \u2022 Available Cisco Viptela Modules \u2022 Ansible installation process \u2022 Viptela SD-WAN API documentation \u2022 Viptela Cloud OnRamp process \u2022 Viptela Cloud OnRamp APIs Cisco SD-WAN includes a useful tool for configuration management and network monitoring: vManage. Within the SD-WAN fabric, the vManage tool is responsible for handling the management plane, meaning that all the configurations can be performed from its graphical user interface (GUI). The vManage tool also offers a rich set of REST APIs, enabling you to automate specific workflows using your favorite tool, such as Postman, Python, Ansible, and others. Task 1: Environment Setup Create a notepad that will have the following information that you\u2019ll be working to fill out throughout this lab. vManage IP: vManage Username: vManage Password: AWS Access Key: AWS Secret Key: 8000v UUID1: (To be used for Scenario 2) 8000v UUID2: (To be used for Scenario 2) 8000v UUID3: (To be used for Scenario 1) VPC 1 ID: VPC 2 ID: Connect to the Ubuntu host via the VM console (or PuTTY). Review the Cisco Viptela vManage Python SDK/CLI/Ansible repo in the /home/dcloud directory. Note: This has already been installed, but the process of installation was simple cd home/dcloud pip install viptela Navigate to the python-viptela directory Verify Ansible is installed with ansible \u2013version Modify the hosts file. The default location for this file is /etc/ansible/hosts. [vmanage] Note: This is as bare-bones as one could possibly create a host file. For the purpose of education, the host file format is most commonly in either INI or YAML. This host file allows Ansible playbooks to be executed hierarchically, with nested parent/child groups, and with specific variables associated to a host or group(s) of hosts. [webservers] foo.example.com bar.example.com [dbservers] one.example.com two.example.com three.example.com Open your windows jumphost via remote desktop Provision AWS credentials (Double-click the Launch shortcut) Request AWS account (this takes a couple of minutes, so let\u2019s get this knocked out) Introduction to key concepts In the SD-WAN environment, you must still manage configuration of devices (vEdges) independently. This is because the SD-WAN fabric is widely distributed in the wide-area network (WAN). The vManage is a single point of configuration for the whole WAN fabric and uses a templates to simplify configuration management. In SD-WAN, you can configure every feature with a feature template. Templates ensure that the configuration is consistent across all the devices. Feature templates are grouped together into device templates that will be attached to the end devices. What is a feature template? Feature templates are the building blocks of complete configuration for a device. For each feature that you can enable on a device, Cisco vManage provides a template form that you fill out. The form allows you to set the values for all configurable parameters for that feature. Because device configurations vary for different device types and the different types of routers, feature templates are specific to the type of device. How does this differ from device templates? Device templates use feature templates! Device templates contain complete operational configuration for a device. You create device templates by consolidating individual feature templates. Each device template is specific for a type of device. For each device type, if multiple devices have the same configuration, you can use the same device template for them. For example, many of the routers in a network might have the same basic configuration, so you can configure them with the same templates. (You specify the differences in the templates using configuration variables, which are discussed below.) If the configurations for the same type of devices are different, you create separate device templates. For the first scenario, we\u2019ll be creating & using several Ansible playbooks. The purpose of this scenario is to familiarize yourself with the YAML playbook syntax and to better understand feature and device templates within an SD-WAN fabric. One thing you\u2019ll find throughout these subsequent tasks are a few Ansible playbooks that leverage vManage modules within Ansible found here https://github.com/CiscoDevNet/python-viptela What are modules? \u201cAnsible modules are units of code that can control system resources or execute system commands. Ansible provides a module library that you can execute directly on remote hosts or through playbooks.\u201d In other words, modules are Python scripts that expect several inputs and can provide varying outputs. Template Export (demonstration) The first playbook we\u2019ll create uses the ansible URI module to invoke an API call to vManage. The main API used here is the /dataservice/template/feature API. The /dataservice/ part of the URL represents the API entry point. The remainder, /template/feature/, identifies the resource that you are going to manipulate: in this case, feature templates. The methods that you are going to use to manipulate feature template are: GET: Retrieves information from the system. POST: Creates a new object (in this case, a new feature template). PUT: Modifies an existing object. DELETE: Deletes an existing object The default output is a JSON formatted list of the various device templates, and the template ID associated with each individual feature template. Note: The template ID will be used to uniquely identify the feature templates when we associate the feature templates with the device template at a later step The playbook then cycles through the json data and combines the feature template name & feature template ID into a key/value pair. These values are stored into a local variable called feature_template_db which is then printed. - name: Export vManage Template hosts: vmanage gather_facts: no connection: local vars: file: vmanage-templates.yml #ALL YOUR POD/AWS SPECIFICS GO HERE# vars_files: - /home/dcloud/python-viptela/external_vars.yml tasks: - name: Get Cookies ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/j_security_check method: POST body_format: form-urlencoded validate_certs: False body: j_username: \"{{ USERNAME }}\" j_password: \"{{ PASSWORD }}\" register: login - name: Output Cookie Info ansible.builtin.debug: var: login.cookies - name: Get XSRF ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/client/token method: GET body_format: json validate_certs: False return_content: true headers: Cookie: \"{{ login.cookies_string }}\" register: cookie_output - name: Cookie Output ansible.builtin.debug: var: cookie_output.content ################################################################################## - name: Get Feature Template uri: url: https://{{ VMANAGE_IP }}/dataservice/template/feature method: GET return_content: yes validate_certs: no headers: Cookie: \"{{ login.cookies_string }}\" X-XSRF-TOKEN: \"{{ cookie_output.content }}\" Content-Type: \"application/json\" register: template_list - set_fact: feature_template_db: \"{{ feature_template_db|default({}) | combine( {item.templateName: item.templateId } ) }}\" no_log: True with_items: \"{{ template_list.json.data }}\" - debug: msg: \"{{ feature_template_db }}\" Copy/paste this into a new yml file called \u201c10_Export_Feature_Templates.yml\u201d \u2013 this playbook will only be run for demonstration purposes and is not used in the subsequent sections. But wait? What is the mess above the \u201c * * **\u201d line in playbook 10? You\u2019ll see this in differing flavours throughout this lab guide but the principal behind this is that before we can do anything using APIs we need to 1) authenticate (get a cookie) and 2) generate an XSRF token, using the cookie. Between scenario 1 and 2 you\u2019ll see this done in varying ways-using a role and/or part of the Ansible playbook. The former option allows for cleaner, more concise Ansible playbook construction. Regardless, URI calls to the vManage APIs are how we perform most (all) of the steps throughout this lab guide. This isn\u2019t always how Ansible is used, though. Executing these plays locally on the Ansible control node is being performed with the \u201cConnection: local\u201d syntax as the top of the Playbook. Ansible typically works by connecting to your nodes and pushing out small programs\u2014called modules\u2014to these nodes. Modules are used to accomplish automation tasks in Ansible. These programs are written to be resource models of the desired state of the system. Ansible then executes these modules and removes them when finished. For automating network devices and other IT appliances where modules cannot be executed, Ansible will run on the control node (i.e. what we\u2019re doing for all of our Ansible plays). Template Export (template dump) Copy and paste the following into a new yml file called \u201c11_Export_Existing_Templates.yml\u201d The purpose of this playbook is to use the the vmanage_template_export API (which should be visible within the python-viptela>ansible>modules directory within the github link). The contents of this export are stored in the yml file \u2018vmanage-templates.yml.\u2019 We\u2019ll leverage this \u2018dump\u2019 of feature templates in subsequent steps throughout Scenario 1. But how? Before we get to that, execute the playbook and review the output of the vmanage-templates.yml file (created in the same directory as where the playbook is executed). - name: Export vManage Template hosts: vmanage gather_facts: no connection: local vars: file: vmanage-templates.yml #ALL YOUR POD/AWS SPECIFICS GO HERE# vars_files: - /home/dcloud/python-viptela/external_vars.yml tasks: - name: Get Cookies ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/j_security_check method: POST body_format: form-urlencoded validate_certs: False body: j_username: \"{{ USERNAME }}\" j_password: \"{{ PASSWORD }}\" register: login - name: Output Cookie Info ansible.builtin.debug: var: login.cookies - name: Get XSRF ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/client/token method: GET body_format: json validate_certs: False return_content: true headers: Cookie: \"{{ login.cookies_string }}\" register: cookie_output - name: Cookie Output ansible.builtin.debug: var: cookie_output.content ################################################################################## tasks: - vmanage_template_export: user: \"{{ USERNAME }}\" host: \"{{ VMANAGE_IP }}\" password: \"{{ PASSWORD }}\" file: \"{{ file }}\" Now that we have this information available to us, we can effectively reverse engineer the existing templates to create a new device template of our own. How? Before we answer how let\u2019s cover two topics: Roles: A role in Ansible is a set of tasks that accomplish a specific goal within a playbook. Roles let you automatically load related vars, files, tasks, handlers, and other Ansible artifacts based on a known file structure. After you group your content in roles, you can easily reuse them and share them with other users. Jinja2: Jinja2 templates are simple template files that store variables that can change from time to time. When Playbooks are executed, these variables get replaced by actual values defined in Ansible Playbooks. Here is a high-level flow as to how we\u2019ll leverage Jinja2 templates & roles to develop our own device templates using Ansible. 1. Create roles via Ansible Galaxy: \u201cansible-galaxy init ~/python-viptela/roles/ \u201d This creates a directory that we can populate that we can subsequently call across other playbooks. Note: see the roles directory 2. Identify what part do we want to work on (use VPN0 as an example) 3. Create the j2 file from the vmanage-templates.yml blueprint (free online YML to j2 converters exist) using the portion we intend to modify (in step 2). 4. Modify j2 components that we intend to templatize. Note: We selected some things to demonstrate the key/value pair, but one could modify this with whatever factors you care to templatize. Create subsequent playbooks that call the role where the J2 file resides and pass the specific variables. The role will use the tasks main.yml file in a top-down format (render first, post second) a. Render: Create the JSON payload from the variables that are passed when the role is used b. Post: This may be a surprise, but post\u2026performs a URI post using the rendered JSON file. To summarize the high-level components within the roles directories: Templates: This is where the actual j2 file lives. Tasks: Where we render the JSON payload and post when the role is referenced. Files: Latest JSON payload, with passed variables populated. Note: An Ansible role has a defined directory structure with eight main standard directories. You must include at least one of these directories in each role. You can omit any directories the role does not use. Scenario 1 As described in the previous section, Configuration management in SD-WAN is performed with Feature and device templates. Think of a feature template as a small piece of a puzzle that describes the configuration of a given feature, such as a Banner, VPN, or BGP. The feature template renders the configuration into the CLI. After you create the feature templates, you can merge them together into a device template. A device template represents a target design of a given branch. For example, you need a device template for single-homed branches, one for dual-homed ones, another for branches that leverage routing protocols, and more. In Section1, you will automatically provision a vEdge. To do that, you need to create a set of feature templates, merge those feature templates into a device template and subsequently attach the device-template to the vEdge. To begin, you are going to create these feature templates: \u2022 VPN0 Template \u2022 VPN512 Template \u2022 VPN10 Template (Service VPN) \u2022 VPN0 Interface Template \u2022 VPN512 Interface Template \u2022 VPN10 Interface Template (Service VPN) Task 1: Deploy Feature VPN0 Template Using the logic explained in the key concepts introduction, we\u2019re going to develop our own template based on a number of user-defined variables. In this first feature template example, we \u2018care\u2019 about the following: 1. Template Name 2. Template Description 3. DNS Address 4. Default next hop 5. Default next hop Distance Given we know WHAT we want to modify, we now need to create a J2 template (using the vmanage-templates.yml \u2018dump\u2019 created previously). A J2 template is formatted in JSON so we\u2019ll take the template we which to templatize (VPN0) and convert it into JSON. https://onlineyamltools.com/convert-yaml-to-json Convert the VPN0 YML content from the vmanage-templates.yml file into JSON, and modify the 5 items listed above. You\u2019re going to be looking for the \u2018BR1-C8000v-VPN0\u2019 template name. The syntax for the variables is: \"{{ VARIABLE }}\" Find the 5 items we wish to templatize and give them a name. For this first example, we\u2019ve used the following: \"{{ Template_Name }}\" \"{{ Template_Description }}\" \"{{ DNS_Address }}\" \"{{ Default_Next_Hop_VPN0 }}\" \"{{ Default_Next_Hop_VPN0_Distance }}\" Now that we have the YML file converted into a JSON and the values replaced with variable names, we need to create our role directory and add this content into the templates subdirectory. 2. Run the following: ansible-galaxy init ~/python-viptela/roles/<ROLE NAME> Navigate to the new role you\u2019ve defined and go to the templates subdirectory (it is empty). Create a j2 file (nano .j2) and copy/paste the file you\u2019ve been modifying. Save/exit (Ctrl+X) Now that we have the template we need to tell the role WHAT to do, should the role be called. Navigate to \u2018tasks.\u2019 We can see that a value already exists here, called main.yml. Should we have a need for multiple tasks, main.yml is executed sequentially. If you perform at \u2018more main.yml\u2019 you\u2019ll see that this file is currently empty. We\u2019ll create two tasks, then reference them within main.yml by importing them. render_vpn0_template.yml post_vpn0_template.yml Create the following files within the tasks directory. Let\u2019s cover & modify the render_vpn0_template.yml task first. This task does nothing more than create a JSON file from the j2 template that we created previously. What\u2019s different is that this JSON file will include the values created from any variables passed when this role is called. - name: Clean Previously Rendered Templates file: path: \"{{item}}\" state: absent force: true with_fileglob: - \"{{role_path}}/files/*\" - name: Render VPN0 Template template: src=\"<Template Name>\u201d.j2\" dest={{role_path}}/files/{{ Template_Name }}.json This file specifically references the j2 template that you\u2019ve created-so make sure you specify the correct name. It then creates the JSON file in the directory \u2018files\u2019 within this specific role. Lastly, because this playbook may be run more than once, it replaces any existing files with the newly created one on each playbook execution. 6. Lets navigate back to the main.yml and import this task: - import_tasks: render_vpn0_template.yml Now that we have the task to CREATE the JSON file\u2026we need a task to do a URI POST, using the JSON file created previously within the body of our message. 7. Create another yml file within the tasks directory, calling this one post_vpn0_template.yml: - name: Post VPN0 Template uri: url: https://{{ VMANAGE_IP }}/dataservice/template/feature method: POST return_content: yes validate_certs: no body: \"{{lookup('file', '{{item}}')}}\" body_format: json headers: Cookie: \"{{ login.cookies_string }}\" X-XSRF-TOKEN: \"{{ cookie_output.content }}\" Content-Type: \"application/json\" with_fileglob: - \"{{ role_path }}/files/*.json\" Like before, we now need to modify our main.yml file to call the post task. 8. Add the following to the main.yml file, after the render import: - import_tasks: post_vpn0_template.yml If we\u2019ve followed the above steps correctly, our main.yml should look something like this: dcloud@dcloud-virtual-machine:~/python-viptela/roles/create_vpn0_template/tasks$ more main.yml - import_tasks: render_vpn0_template.yml - import_tasks: post_vpn0_template.yml To recap, the above steps: 1. Created the role 2. Created the j2 template, from the vmanage-templates.yml \u2018dump\u2019 3. Created the tasks render & post We are now ready to create a playbook that will leverage the role! 9. Create a new YML file called \u201c12_Deploy_Feature_VPN0_Template.yml\u201d - name: Deploy Feature VPN0 Template hosts: all connection: local gather_facts: no vars_files: - /home/dcloud/python-viptela/external_vars.yml roles: - role: login tags: CL-2001,CL-2001:login - role: create_vpn0_template tags: CL-2001,CL-2001:create vars: - Template_Name: 'CL-BR-C8000v-VPN0' - Template_Description: 'VPN0 Template for the On-Prem C8000v' - DNS_Address: '198.18.1.1' - Default_Next_Hop_VPN0: '198.19.2.1' - Default_Next_Hop_VPN0_Distance: '1' Hopefully the explanation in the previous steps make this playbook\u2019s purpose obvious, but from a high-level we\u2019re calling the role \u2018login\u2019 to generate a cookie & XSRF token then the role \u2018create_vpn0_template\u2019 and passing a number of variables to the j2 template within that role. 10. Execute this playbook. (If it wasn\u2019t the obvious, you now have a new feature template). Task 2: Deploy Feature VPN512 Template Do everything you did before, again. Just kidding, we\u2019ve done the leg work to pre-populate these roles (as you\u2019ve probably seen in the roles directory). Simply create a new yml file called \u201813_Deploy_Feature_VPN512_Template.yml.\u2019 We\u2019ll use this playbook to-you guessed it-create a VPN512 template. - name: Deploy Feature VPN512 Template hosts: all connection: local gather_facts: no vars_files: - /home/dcloud/python-viptela/external_vars.yml roles: - role: login tags: CL-2001,CL-2001:login - role: create_vpn512_template tags: CL-2001,CL-2001:create vars: - Template_Name: 'CL-BR-C8000v-VPN512' - Template_Description: 'VPN512 Template for the On-Prem C8000v' - Default_Next_Hop_VPN512: '198.18.128.1' - Default_Next_Hop_VPN512_Distance: '1' Execute this playbook. Task 3: Deploy Service VPN10 Template Create a new yml file called \u201814_Deploy_Feature_Service_VPN10_Template.yml.\u2019 - name: Deploy Service VPN10 Template hosts: all connection: local gather_facts: no vars_files: - /home/dcloud/python-viptela/external_vars.yml roles: - role: login tags: CL-2001,CL-2001:login - role: create_service_vpn10_template tags: CL-2001,CL-2001:create vars: - Template_Name: 'CL-BR-C8000v-VPN10' - Template_Description: 'VPN10 Template for the On-Prem C8000v' - DNS_Address: '198.18.1.1' Execute this playbook Task 4: Deploy VPN0 Interface Feature Template Create a new yml file called \u201815_Deploy_Feature_VPN0_Interface_Template.yml\u2019 - name: Deploy Feature VPN0 Interface Template hosts: all connection: local gather_facts: no vars_files: - /home/dcloud/python-viptela/external_vars.yml roles: - role: login tags: CL-2001,CL-2001:login - role: create_vpn0_interface_template tags: CL-2001,CL-2001:create vars: - Template_Name: 'CL-BR-C8000v-VPN0-INT' - Template_Description: 'VPN0 Interface Template for the On-Prem C8000v' - VPN_Interface: 'GigabitEthernet3' - VPN_Interface_Address: '198.19.2.13/24' - VPN_Interface_IP_MTU: '1500' - VPN_Interface_MTU: '1500' - VPN_Interface_ARP_Timeout: '1200' - VPN_Interface_Load_Interval: '30' - Tunnel_Interface_Color: 'biz-internet' - Tunnel_Interface_Encap: 'ipsec' - Tunnel_DHCP: 'true' - Tunnel_DNS: 'true' - Tunnel_ICMP: 'true' - NAT_UDP_Timeout: '1' - NAT_TCP_Timeout: '60' - NAT_Type: 'interface' - NAT_Overload: 'true' Note: While this looks like a lot bigger, it simply references a role (create_vpn0_interface_template) that has more variables specified in its j2 template. 2. Execute this playbook. Task 5: Deploy VPN512 Interface Feature Template Create a new yml file called \u201816_Deploy_Feature_VPN512_Interface_Template.yml\u2019 - name: Deploy Feature VPN512 Interface Template hosts: all connection: local gather_facts: no vars_files: - /home/dcloud/python-viptela/external_vars.yml roles: - role: login tags: CL-2001,CL-2001:login - role: create_vpn512_interface_template tags: CL-2001,CL-2001:create vars: - Template_Name: \u2018CL-BR-C8000v-VPN512-INT\u2019 - Template_Description: \u2018VPN512 Interface Template for the On-Prem C8000v\u2019 - VPN_Interface: \u2018GigabitEthernet1\u2019 - VPN_Interface_Address: \u2018198.18.133.13/18\u2019 - VPN_Interface_IP_MTU: \u20181500\u2019 - VPN_Interface_MTU: \u20181500\u2019 - VPN_Interface_ARP_Timeout: \u20181200\u2019 - VPN_Interface_Load_Interval: \u201830\u2019 Execute this playbook. Task 6: Deploy VPN10 Interface Template (Service VPN) Create a new yml file called \u201816_Deploy_Feature_VPN512_Interface_Template.yml\u2019 - name: Deploy Feature Service VPN10 Interface Template hosts: all connection: local gather_facts: no vars_files: - /home/dcloud/python-viptela/external_vars.yml roles: - role: login tags: CL-2001,CL-2001:login - role: create_service_vpn10_interface_template tags: CL-2001,CL-2001:create vars: - Template_Name: 'CL-BR-C8000v-VPN10-INT' - Template_Description: 'VPN10 Interface Template for the On-Prem C8000v' - VPN_Interface: 'GigabitEthernet2' - VPN_Interface_Address: '100.64.10.1/24' - VPN_Interface_IP_MTU: '1500' - VPN_Interface_MTU: '1500' - VPN_Interface_ARP_Timeout: '1200' - VPN_Interface_Load_Interval: '30' Execute this playbook. Task 7: Deploy Device Template Create a new yml file called \u201818_Deploy_Device_Template.yml\u2019 - name: Deploy Device Template hosts: all connection: local gather_facts: no vars_files: - /home/dcloud/python-viptela/external_vars.yml roles: - role: login tags: CL-2001,CL-2001:login - role: create_device_template tags: CL-2001,CL-2001:create vars: - Device_Template_Name: 'CL-BR1-C8000v' - Device_Template_Description: 'Device Template for OnPrem C8000v' - Feature_AAA: Factory_Default_AAA_CISCO_Template - Feature_BFD: Default_BFD_Cisco_V01 - Feature_Banner: Factory_Default_Retail_Banner - Feature_Logging: Default_Logging_Cisco_V01 - Feature_OMP: Factory_Default_Cisco_OMP_ipv46_Template - Feature_Global: Factory_Default_Global_CISCO_Template - Feature_Security: Default_Security_Cisco_V01 - Feature_System: Default_BootStrap_Cisco_System_Template - Feature_VPN: CL-BR-C8000v-VPN0: - CL-BR-C8000v-VPN0-INT CL-BR-C8000v-VPN512: - CL-BR-C8000v-VPN512-INT CL-BR-C8000v-VPN10: - CL-BR-C8000v-VPN10-INT Note: The feature VPNs above are what we created in tasks 1-6. The outcome of this playbook execution will be a device template with the corresponding feature templates. 2. Execute this playbook. Task 8: Attach Device Template Create a new yml file called \u201819_Attach_Device_Template.yml\u2019 - name: Attach Device Template hosts: all connection: local gather_facts: no vars_files: - /home/dcloud/python-viptela/external_vars.yml roles: - role: login tags: CL-2001,CL-2001:login - role: attach_device_template tags: lab2:attach vars: DeviceTemplateList: CL-BR1-C8000v: - csv-deviceIP: 1.1.1.101 csv-deviceId: C8K-16AAD483-F5EC-AB00-465A-EDBA673652B7 csv-host-name: CL-BR1-CEDGE8Kv-TEST //system/host-name: CL-BR1-CEDGE8Kv-TEST //system/site-id: 10 //system/system-ip: 1.1.1.101 Change: false Note: We may need to modify the csv-deviceId value with an 8000v from your pod. An available UUID can be found in Configuration>Devices. Execute this playbook. What did we just do? Lets recap steps 1-8: We created 2 VPN feature templates (0 & 512) We created a service VPN template (VPN10) We created 3 interface feature templates We associated these feature templates into a device template We attached this device template to a C8000v with the UUID of an C8000v within our lab environment. Note: This is for demonstration purposes and this specific C8000v is not currently online. We\u2019ve assigned this device template to this UUID should it come online it will have the configuration associated with these feature templates.","title":"Home"},{"location":"#extend-the-enterprise-wan-to-the-aws-cloud-a-first-hand-deployment-experience-using-ansible","text":"LTRXAR-2001","title":"Extend the Enterprise WAN to the AWS Cloud: A first-hand deployment experience using Ansible"},{"location":"#speakers","text":"Kyle Barnes \u2013 CX Architect, Praveen Poojary \u2013 CX Architect, Navin Suvarna \u2013 CX Architect","title":"Speakers"},{"location":"#about-this-lab","text":"","title":"About this lab"},{"location":"#lab-introduction","text":"We\u2019d like to introduce you to a simple SD-WAN deployment: One single border router. In this lab the Viptela vManage, vSmart, vBond, and border router bring up sequence has already been completed. We have two hosts, a windows jumpbox and a linux host, that we\u2019ll leverage to provision our AWS account and execute our Ansible playbooks, respectively. We\u2019ve already deployed Ansible on the Linux host so we\u2019re ready to dive into two very unique scenarios.","title":"Lab Introduction"},{"location":"#lab-flow","text":"In this lab, you will follow the lab guide on the scenarios below: Scenario 1: We\u2019ll explore the topics of Viptela device vs feature templates, Explore Ansible roles, Jinja2 templates, modules, etc. We\u2019ll then leverage existing templates to reverse engineer the template structure to create our own! Scenario 2: Here we\u2019ll leverage a lab AWS environment to deploy Viptela\u2019s Cloud OnRamp for Multicloud using Ansible playbooks. While most (all) of the playbooks used in this section are URI post/get calls, the outcome of this scenario is a deeper understanding of the APIs/Config Options available & used during the OnRamp process.","title":"Lab Flow"},{"location":"#lab-access","text":"Below table provides the IP addresses and credentials for the devices used in this lab: Note: You are able to access all devices via SSH and GUI after AnyConnect into dCloud. There is no remote desktop or any jump server required to access the lab. If you don't have AnyConnect VPN Client installed, you can download AnyConnect from here https://developer.cisco.com/site/devnet/sandbox/anyconnect/","title":"Lab Access"},{"location":"#lab-topology","text":"(Remember when we said \u201cVERY small SD-WAN deployment?)","title":"Lab Topology"},{"location":"#learning-objectives","text":"Upon completion of this lab, you will be able to understand the following: \u2022 Viptela SD-WAN device vs feature templates \u2022 Understand basic Ansible structure (playbooks, roles, variables, modules) \u2022 Available Cisco Viptela Modules \u2022 Ansible installation process \u2022 Viptela SD-WAN API documentation \u2022 Viptela Cloud OnRamp process \u2022 Viptela Cloud OnRamp APIs Cisco SD-WAN includes a useful tool for configuration management and network monitoring: vManage. Within the SD-WAN fabric, the vManage tool is responsible for handling the management plane, meaning that all the configurations can be performed from its graphical user interface (GUI). The vManage tool also offers a rich set of REST APIs, enabling you to automate specific workflows using your favorite tool, such as Postman, Python, Ansible, and others.","title":"Learning Objectives"},{"location":"#task-1-environment-setup","text":"Create a notepad that will have the following information that you\u2019ll be working to fill out throughout this lab. vManage IP: vManage Username: vManage Password: AWS Access Key: AWS Secret Key: 8000v UUID1: (To be used for Scenario 2) 8000v UUID2: (To be used for Scenario 2) 8000v UUID3: (To be used for Scenario 1) VPC 1 ID: VPC 2 ID: Connect to the Ubuntu host via the VM console (or PuTTY). Review the Cisco Viptela vManage Python SDK/CLI/Ansible repo in the /home/dcloud directory. Note: This has already been installed, but the process of installation was simple cd home/dcloud pip install viptela Navigate to the python-viptela directory Verify Ansible is installed with ansible \u2013version Modify the hosts file. The default location for this file is /etc/ansible/hosts. [vmanage] Note: This is as bare-bones as one could possibly create a host file. For the purpose of education, the host file format is most commonly in either INI or YAML. This host file allows Ansible playbooks to be executed hierarchically, with nested parent/child groups, and with specific variables associated to a host or group(s) of hosts. [webservers] foo.example.com bar.example.com [dbservers] one.example.com two.example.com three.example.com Open your windows jumphost via remote desktop Provision AWS credentials (Double-click the Launch shortcut) Request AWS account (this takes a couple of minutes, so let\u2019s get this knocked out)","title":"Task 1: Environment Setup"},{"location":"#introduction-to-key-concepts","text":"In the SD-WAN environment, you must still manage configuration of devices (vEdges) independently. This is because the SD-WAN fabric is widely distributed in the wide-area network (WAN). The vManage is a single point of configuration for the whole WAN fabric and uses a templates to simplify configuration management. In SD-WAN, you can configure every feature with a feature template. Templates ensure that the configuration is consistent across all the devices. Feature templates are grouped together into device templates that will be attached to the end devices. What is a feature template? Feature templates are the building blocks of complete configuration for a device. For each feature that you can enable on a device, Cisco vManage provides a template form that you fill out. The form allows you to set the values for all configurable parameters for that feature. Because device configurations vary for different device types and the different types of routers, feature templates are specific to the type of device. How does this differ from device templates? Device templates use feature templates! Device templates contain complete operational configuration for a device. You create device templates by consolidating individual feature templates. Each device template is specific for a type of device. For each device type, if multiple devices have the same configuration, you can use the same device template for them. For example, many of the routers in a network might have the same basic configuration, so you can configure them with the same templates. (You specify the differences in the templates using configuration variables, which are discussed below.) If the configurations for the same type of devices are different, you create separate device templates. For the first scenario, we\u2019ll be creating & using several Ansible playbooks. The purpose of this scenario is to familiarize yourself with the YAML playbook syntax and to better understand feature and device templates within an SD-WAN fabric. One thing you\u2019ll find throughout these subsequent tasks are a few Ansible playbooks that leverage vManage modules within Ansible found here https://github.com/CiscoDevNet/python-viptela What are modules? \u201cAnsible modules are units of code that can control system resources or execute system commands. Ansible provides a module library that you can execute directly on remote hosts or through playbooks.\u201d In other words, modules are Python scripts that expect several inputs and can provide varying outputs.","title":"Introduction to key concepts"},{"location":"#template-export-demonstration","text":"The first playbook we\u2019ll create uses the ansible URI module to invoke an API call to vManage. The main API used here is the /dataservice/template/feature API. The /dataservice/ part of the URL represents the API entry point. The remainder, /template/feature/, identifies the resource that you are going to manipulate: in this case, feature templates. The methods that you are going to use to manipulate feature template are: GET: Retrieves information from the system. POST: Creates a new object (in this case, a new feature template). PUT: Modifies an existing object. DELETE: Deletes an existing object The default output is a JSON formatted list of the various device templates, and the template ID associated with each individual feature template. Note: The template ID will be used to uniquely identify the feature templates when we associate the feature templates with the device template at a later step The playbook then cycles through the json data and combines the feature template name & feature template ID into a key/value pair. These values are stored into a local variable called feature_template_db which is then printed. - name: Export vManage Template hosts: vmanage gather_facts: no connection: local vars: file: vmanage-templates.yml #ALL YOUR POD/AWS SPECIFICS GO HERE# vars_files: - /home/dcloud/python-viptela/external_vars.yml tasks: - name: Get Cookies ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/j_security_check method: POST body_format: form-urlencoded validate_certs: False body: j_username: \"{{ USERNAME }}\" j_password: \"{{ PASSWORD }}\" register: login - name: Output Cookie Info ansible.builtin.debug: var: login.cookies - name: Get XSRF ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/client/token method: GET body_format: json validate_certs: False return_content: true headers: Cookie: \"{{ login.cookies_string }}\" register: cookie_output - name: Cookie Output ansible.builtin.debug: var: cookie_output.content ################################################################################## - name: Get Feature Template uri: url: https://{{ VMANAGE_IP }}/dataservice/template/feature method: GET return_content: yes validate_certs: no headers: Cookie: \"{{ login.cookies_string }}\" X-XSRF-TOKEN: \"{{ cookie_output.content }}\" Content-Type: \"application/json\" register: template_list - set_fact: feature_template_db: \"{{ feature_template_db|default({}) | combine( {item.templateName: item.templateId } ) }}\" no_log: True with_items: \"{{ template_list.json.data }}\" - debug: msg: \"{{ feature_template_db }}\" Copy/paste this into a new yml file called \u201c10_Export_Feature_Templates.yml\u201d \u2013 this playbook will only be run for demonstration purposes and is not used in the subsequent sections. But wait? What is the mess above the \u201c * * **\u201d line in playbook 10? You\u2019ll see this in differing flavours throughout this lab guide but the principal behind this is that before we can do anything using APIs we need to 1) authenticate (get a cookie) and 2) generate an XSRF token, using the cookie. Between scenario 1 and 2 you\u2019ll see this done in varying ways-using a role and/or part of the Ansible playbook. The former option allows for cleaner, more concise Ansible playbook construction. Regardless, URI calls to the vManage APIs are how we perform most (all) of the steps throughout this lab guide. This isn\u2019t always how Ansible is used, though. Executing these plays locally on the Ansible control node is being performed with the \u201cConnection: local\u201d syntax as the top of the Playbook. Ansible typically works by connecting to your nodes and pushing out small programs\u2014called modules\u2014to these nodes. Modules are used to accomplish automation tasks in Ansible. These programs are written to be resource models of the desired state of the system. Ansible then executes these modules and removes them when finished. For automating network devices and other IT appliances where modules cannot be executed, Ansible will run on the control node (i.e. what we\u2019re doing for all of our Ansible plays).","title":"Template Export (demonstration)"},{"location":"#template-export-template-dump","text":"Copy and paste the following into a new yml file called \u201c11_Export_Existing_Templates.yml\u201d The purpose of this playbook is to use the the vmanage_template_export API (which should be visible within the python-viptela>ansible>modules directory within the github link). The contents of this export are stored in the yml file \u2018vmanage-templates.yml.\u2019 We\u2019ll leverage this \u2018dump\u2019 of feature templates in subsequent steps throughout Scenario 1. But how? Before we get to that, execute the playbook and review the output of the vmanage-templates.yml file (created in the same directory as where the playbook is executed). - name: Export vManage Template hosts: vmanage gather_facts: no connection: local vars: file: vmanage-templates.yml #ALL YOUR POD/AWS SPECIFICS GO HERE# vars_files: - /home/dcloud/python-viptela/external_vars.yml tasks: - name: Get Cookies ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/j_security_check method: POST body_format: form-urlencoded validate_certs: False body: j_username: \"{{ USERNAME }}\" j_password: \"{{ PASSWORD }}\" register: login - name: Output Cookie Info ansible.builtin.debug: var: login.cookies - name: Get XSRF ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/client/token method: GET body_format: json validate_certs: False return_content: true headers: Cookie: \"{{ login.cookies_string }}\" register: cookie_output - name: Cookie Output ansible.builtin.debug: var: cookie_output.content ################################################################################## tasks: - vmanage_template_export: user: \"{{ USERNAME }}\" host: \"{{ VMANAGE_IP }}\" password: \"{{ PASSWORD }}\" file: \"{{ file }}\" Now that we have this information available to us, we can effectively reverse engineer the existing templates to create a new device template of our own. How? Before we answer how let\u2019s cover two topics: Roles: A role in Ansible is a set of tasks that accomplish a specific goal within a playbook. Roles let you automatically load related vars, files, tasks, handlers, and other Ansible artifacts based on a known file structure. After you group your content in roles, you can easily reuse them and share them with other users. Jinja2: Jinja2 templates are simple template files that store variables that can change from time to time. When Playbooks are executed, these variables get replaced by actual values defined in Ansible Playbooks. Here is a high-level flow as to how we\u2019ll leverage Jinja2 templates & roles to develop our own device templates using Ansible. 1. Create roles via Ansible Galaxy: \u201cansible-galaxy init ~/python-viptela/roles/ \u201d This creates a directory that we can populate that we can subsequently call across other playbooks. Note: see the roles directory 2. Identify what part do we want to work on (use VPN0 as an example) 3. Create the j2 file from the vmanage-templates.yml blueprint (free online YML to j2 converters exist) using the portion we intend to modify (in step 2). 4. Modify j2 components that we intend to templatize. Note: We selected some things to demonstrate the key/value pair, but one could modify this with whatever factors you care to templatize. Create subsequent playbooks that call the role where the J2 file resides and pass the specific variables. The role will use the tasks main.yml file in a top-down format (render first, post second) a. Render: Create the JSON payload from the variables that are passed when the role is used b. Post: This may be a surprise, but post\u2026performs a URI post using the rendered JSON file. To summarize the high-level components within the roles directories: Templates: This is where the actual j2 file lives. Tasks: Where we render the JSON payload and post when the role is referenced. Files: Latest JSON payload, with passed variables populated. Note: An Ansible role has a defined directory structure with eight main standard directories. You must include at least one of these directories in each role. You can omit any directories the role does not use.","title":"Template Export (template dump)"},{"location":"#scenario-1","text":"As described in the previous section, Configuration management in SD-WAN is performed with Feature and device templates. Think of a feature template as a small piece of a puzzle that describes the configuration of a given feature, such as a Banner, VPN, or BGP. The feature template renders the configuration into the CLI. After you create the feature templates, you can merge them together into a device template. A device template represents a target design of a given branch. For example, you need a device template for single-homed branches, one for dual-homed ones, another for branches that leverage routing protocols, and more. In Section1, you will automatically provision a vEdge. To do that, you need to create a set of feature templates, merge those feature templates into a device template and subsequently attach the device-template to the vEdge. To begin, you are going to create these feature templates: \u2022 VPN0 Template \u2022 VPN512 Template \u2022 VPN10 Template (Service VPN) \u2022 VPN0 Interface Template \u2022 VPN512 Interface Template \u2022 VPN10 Interface Template (Service VPN)","title":"Scenario 1"},{"location":"#task-1-deploy-feature-vpn0-template","text":"Using the logic explained in the key concepts introduction, we\u2019re going to develop our own template based on a number of user-defined variables. In this first feature template example, we \u2018care\u2019 about the following: 1. Template Name 2. Template Description 3. DNS Address 4. Default next hop 5. Default next hop Distance Given we know WHAT we want to modify, we now need to create a J2 template (using the vmanage-templates.yml \u2018dump\u2019 created previously). A J2 template is formatted in JSON so we\u2019ll take the template we which to templatize (VPN0) and convert it into JSON. https://onlineyamltools.com/convert-yaml-to-json Convert the VPN0 YML content from the vmanage-templates.yml file into JSON, and modify the 5 items listed above. You\u2019re going to be looking for the \u2018BR1-C8000v-VPN0\u2019 template name. The syntax for the variables is: \"{{ VARIABLE }}\" Find the 5 items we wish to templatize and give them a name. For this first example, we\u2019ve used the following: \"{{ Template_Name }}\" \"{{ Template_Description }}\" \"{{ DNS_Address }}\" \"{{ Default_Next_Hop_VPN0 }}\" \"{{ Default_Next_Hop_VPN0_Distance }}\" Now that we have the YML file converted into a JSON and the values replaced with variable names, we need to create our role directory and add this content into the templates subdirectory. 2. Run the following: ansible-galaxy init ~/python-viptela/roles/<ROLE NAME> Navigate to the new role you\u2019ve defined and go to the templates subdirectory (it is empty). Create a j2 file (nano .j2) and copy/paste the file you\u2019ve been modifying. Save/exit (Ctrl+X) Now that we have the template we need to tell the role WHAT to do, should the role be called. Navigate to \u2018tasks.\u2019 We can see that a value already exists here, called main.yml. Should we have a need for multiple tasks, main.yml is executed sequentially. If you perform at \u2018more main.yml\u2019 you\u2019ll see that this file is currently empty. We\u2019ll create two tasks, then reference them within main.yml by importing them. render_vpn0_template.yml post_vpn0_template.yml Create the following files within the tasks directory. Let\u2019s cover & modify the render_vpn0_template.yml task first. This task does nothing more than create a JSON file from the j2 template that we created previously. What\u2019s different is that this JSON file will include the values created from any variables passed when this role is called. - name: Clean Previously Rendered Templates file: path: \"{{item}}\" state: absent force: true with_fileglob: - \"{{role_path}}/files/*\" - name: Render VPN0 Template template: src=\"<Template Name>\u201d.j2\" dest={{role_path}}/files/{{ Template_Name }}.json This file specifically references the j2 template that you\u2019ve created-so make sure you specify the correct name. It then creates the JSON file in the directory \u2018files\u2019 within this specific role. Lastly, because this playbook may be run more than once, it replaces any existing files with the newly created one on each playbook execution. 6. Lets navigate back to the main.yml and import this task: - import_tasks: render_vpn0_template.yml Now that we have the task to CREATE the JSON file\u2026we need a task to do a URI POST, using the JSON file created previously within the body of our message. 7. Create another yml file within the tasks directory, calling this one post_vpn0_template.yml: - name: Post VPN0 Template uri: url: https://{{ VMANAGE_IP }}/dataservice/template/feature method: POST return_content: yes validate_certs: no body: \"{{lookup('file', '{{item}}')}}\" body_format: json headers: Cookie: \"{{ login.cookies_string }}\" X-XSRF-TOKEN: \"{{ cookie_output.content }}\" Content-Type: \"application/json\" with_fileglob: - \"{{ role_path }}/files/*.json\" Like before, we now need to modify our main.yml file to call the post task. 8. Add the following to the main.yml file, after the render import: - import_tasks: post_vpn0_template.yml If we\u2019ve followed the above steps correctly, our main.yml should look something like this: dcloud@dcloud-virtual-machine:~/python-viptela/roles/create_vpn0_template/tasks$ more main.yml - import_tasks: render_vpn0_template.yml - import_tasks: post_vpn0_template.yml To recap, the above steps: 1. Created the role 2. Created the j2 template, from the vmanage-templates.yml \u2018dump\u2019 3. Created the tasks render & post We are now ready to create a playbook that will leverage the role! 9. Create a new YML file called \u201c12_Deploy_Feature_VPN0_Template.yml\u201d - name: Deploy Feature VPN0 Template hosts: all connection: local gather_facts: no vars_files: - /home/dcloud/python-viptela/external_vars.yml roles: - role: login tags: CL-2001,CL-2001:login - role: create_vpn0_template tags: CL-2001,CL-2001:create vars: - Template_Name: 'CL-BR-C8000v-VPN0' - Template_Description: 'VPN0 Template for the On-Prem C8000v' - DNS_Address: '198.18.1.1' - Default_Next_Hop_VPN0: '198.19.2.1' - Default_Next_Hop_VPN0_Distance: '1' Hopefully the explanation in the previous steps make this playbook\u2019s purpose obvious, but from a high-level we\u2019re calling the role \u2018login\u2019 to generate a cookie & XSRF token then the role \u2018create_vpn0_template\u2019 and passing a number of variables to the j2 template within that role. 10. Execute this playbook. (If it wasn\u2019t the obvious, you now have a new feature template).","title":"Task 1: Deploy Feature VPN0 Template"},{"location":"#task-2-deploy-feature-vpn512-template","text":"Do everything you did before, again. Just kidding, we\u2019ve done the leg work to pre-populate these roles (as you\u2019ve probably seen in the roles directory). Simply create a new yml file called \u201813_Deploy_Feature_VPN512_Template.yml.\u2019 We\u2019ll use this playbook to-you guessed it-create a VPN512 template. - name: Deploy Feature VPN512 Template hosts: all connection: local gather_facts: no vars_files: - /home/dcloud/python-viptela/external_vars.yml roles: - role: login tags: CL-2001,CL-2001:login - role: create_vpn512_template tags: CL-2001,CL-2001:create vars: - Template_Name: 'CL-BR-C8000v-VPN512' - Template_Description: 'VPN512 Template for the On-Prem C8000v' - Default_Next_Hop_VPN512: '198.18.128.1' - Default_Next_Hop_VPN512_Distance: '1' Execute this playbook.","title":"Task 2: Deploy Feature VPN512 Template"},{"location":"#task-3-deploy-service-vpn10-template","text":"Create a new yml file called \u201814_Deploy_Feature_Service_VPN10_Template.yml.\u2019 - name: Deploy Service VPN10 Template hosts: all connection: local gather_facts: no vars_files: - /home/dcloud/python-viptela/external_vars.yml roles: - role: login tags: CL-2001,CL-2001:login - role: create_service_vpn10_template tags: CL-2001,CL-2001:create vars: - Template_Name: 'CL-BR-C8000v-VPN10' - Template_Description: 'VPN10 Template for the On-Prem C8000v' - DNS_Address: '198.18.1.1' Execute this playbook","title":"Task 3: Deploy Service VPN10 Template"},{"location":"#task-4-deploy-vpn0-interface-feature-template","text":"Create a new yml file called \u201815_Deploy_Feature_VPN0_Interface_Template.yml\u2019 - name: Deploy Feature VPN0 Interface Template hosts: all connection: local gather_facts: no vars_files: - /home/dcloud/python-viptela/external_vars.yml roles: - role: login tags: CL-2001,CL-2001:login - role: create_vpn0_interface_template tags: CL-2001,CL-2001:create vars: - Template_Name: 'CL-BR-C8000v-VPN0-INT' - Template_Description: 'VPN0 Interface Template for the On-Prem C8000v' - VPN_Interface: 'GigabitEthernet3' - VPN_Interface_Address: '198.19.2.13/24' - VPN_Interface_IP_MTU: '1500' - VPN_Interface_MTU: '1500' - VPN_Interface_ARP_Timeout: '1200' - VPN_Interface_Load_Interval: '30' - Tunnel_Interface_Color: 'biz-internet' - Tunnel_Interface_Encap: 'ipsec' - Tunnel_DHCP: 'true' - Tunnel_DNS: 'true' - Tunnel_ICMP: 'true' - NAT_UDP_Timeout: '1' - NAT_TCP_Timeout: '60' - NAT_Type: 'interface' - NAT_Overload: 'true' Note: While this looks like a lot bigger, it simply references a role (create_vpn0_interface_template) that has more variables specified in its j2 template. 2. Execute this playbook.","title":"Task 4: Deploy VPN0 Interface Feature Template"},{"location":"#task-5-deploy-vpn512-interface-feature-template","text":"Create a new yml file called \u201816_Deploy_Feature_VPN512_Interface_Template.yml\u2019 - name: Deploy Feature VPN512 Interface Template hosts: all connection: local gather_facts: no vars_files: - /home/dcloud/python-viptela/external_vars.yml roles: - role: login tags: CL-2001,CL-2001:login - role: create_vpn512_interface_template tags: CL-2001,CL-2001:create vars: - Template_Name: \u2018CL-BR-C8000v-VPN512-INT\u2019 - Template_Description: \u2018VPN512 Interface Template for the On-Prem C8000v\u2019 - VPN_Interface: \u2018GigabitEthernet1\u2019 - VPN_Interface_Address: \u2018198.18.133.13/18\u2019 - VPN_Interface_IP_MTU: \u20181500\u2019 - VPN_Interface_MTU: \u20181500\u2019 - VPN_Interface_ARP_Timeout: \u20181200\u2019 - VPN_Interface_Load_Interval: \u201830\u2019 Execute this playbook.","title":"Task 5: Deploy VPN512 Interface Feature Template"},{"location":"#task-6-deploy-vpn10-interface-template-service-vpn","text":"Create a new yml file called \u201816_Deploy_Feature_VPN512_Interface_Template.yml\u2019 - name: Deploy Feature Service VPN10 Interface Template hosts: all connection: local gather_facts: no vars_files: - /home/dcloud/python-viptela/external_vars.yml roles: - role: login tags: CL-2001,CL-2001:login - role: create_service_vpn10_interface_template tags: CL-2001,CL-2001:create vars: - Template_Name: 'CL-BR-C8000v-VPN10-INT' - Template_Description: 'VPN10 Interface Template for the On-Prem C8000v' - VPN_Interface: 'GigabitEthernet2' - VPN_Interface_Address: '100.64.10.1/24' - VPN_Interface_IP_MTU: '1500' - VPN_Interface_MTU: '1500' - VPN_Interface_ARP_Timeout: '1200' - VPN_Interface_Load_Interval: '30' Execute this playbook.","title":"Task 6: Deploy VPN10 Interface Template (Service VPN)"},{"location":"#task-7-deploy-device-template","text":"Create a new yml file called \u201818_Deploy_Device_Template.yml\u2019 - name: Deploy Device Template hosts: all connection: local gather_facts: no vars_files: - /home/dcloud/python-viptela/external_vars.yml roles: - role: login tags: CL-2001,CL-2001:login - role: create_device_template tags: CL-2001,CL-2001:create vars: - Device_Template_Name: 'CL-BR1-C8000v' - Device_Template_Description: 'Device Template for OnPrem C8000v' - Feature_AAA: Factory_Default_AAA_CISCO_Template - Feature_BFD: Default_BFD_Cisco_V01 - Feature_Banner: Factory_Default_Retail_Banner - Feature_Logging: Default_Logging_Cisco_V01 - Feature_OMP: Factory_Default_Cisco_OMP_ipv46_Template - Feature_Global: Factory_Default_Global_CISCO_Template - Feature_Security: Default_Security_Cisco_V01 - Feature_System: Default_BootStrap_Cisco_System_Template - Feature_VPN: CL-BR-C8000v-VPN0: - CL-BR-C8000v-VPN0-INT CL-BR-C8000v-VPN512: - CL-BR-C8000v-VPN512-INT CL-BR-C8000v-VPN10: - CL-BR-C8000v-VPN10-INT Note: The feature VPNs above are what we created in tasks 1-6. The outcome of this playbook execution will be a device template with the corresponding feature templates. 2. Execute this playbook.","title":"Task 7: Deploy Device Template"},{"location":"#task-8-attach-device-template","text":"Create a new yml file called \u201819_Attach_Device_Template.yml\u2019 - name: Attach Device Template hosts: all connection: local gather_facts: no vars_files: - /home/dcloud/python-viptela/external_vars.yml roles: - role: login tags: CL-2001,CL-2001:login - role: attach_device_template tags: lab2:attach vars: DeviceTemplateList: CL-BR1-C8000v: - csv-deviceIP: 1.1.1.101 csv-deviceId: C8K-16AAD483-F5EC-AB00-465A-EDBA673652B7 csv-host-name: CL-BR1-CEDGE8Kv-TEST //system/host-name: CL-BR1-CEDGE8Kv-TEST //system/site-id: 10 //system/system-ip: 1.1.1.101 Change: false Note: We may need to modify the csv-deviceId value with an 8000v from your pod. An available UUID can be found in Configuration>Devices. Execute this playbook. What did we just do? Lets recap steps 1-8: We created 2 VPN feature templates (0 & 512) We created a service VPN template (VPN10) We created 3 interface feature templates We associated these feature templates into a device template We attached this device template to a C8000v with the UUID of an C8000v within our lab environment. Note: This is for demonstration purposes and this specific C8000v is not currently online. We\u2019ve assigned this device template to this UUID should it come online it will have the configuration associated with these feature templates.","title":"Task 8: Attach Device Template"},{"location":"about/","text":"About this lab Lab Introduction We\u2019d like to introduce you to a simple SD-WAN deployment: One single border router. In this lab the Viptela vManage, vSmart, vBond, and border router bring up sequence has already been completed. We have two hosts, a windows jumpbox and a linux host, that we\u2019ll leverage to provision our AWS account and execute our Ansible playbooks, respectively. We\u2019ve already deployed Ansible on the Linux host so we\u2019re ready to dive into two very unique scenarios. Lab Flow In this lab, you will follow the lab guide on the scenarios below: Scenario 1: We\u2019ll explore the topics of Viptela device vs feature templates, Explore Ansible roles, Jinja2 templates, modules, etc. We\u2019ll then leverage existing templates to reverse engineer the template structure to create our own! Scenario 2: Here we\u2019ll leverage a lab AWS environment to deploy Viptela\u2019s Cloud OnRamp for Multicloud using Ansible playbooks. While most (all) of the playbooks used in this section are URI post/get calls, the outcome of this scenario is a deeper understanding of the APIs/Config Options available & used during the OnRamp process. Lab Access Below table provides the IP addresses and credentials for the devices used in this lab: Note: You are able to access all devices via SSH and GUI after AnyConnect into dCloud. There is no remote desktop or any jump server required to access the lab. If you don't have AnyConnect VPN Client installed, you can download AnyConnect from here https://developer.cisco.com/site/devnet/sandbox/anyconnect/","title":"About This Lab"},{"location":"about/#about-this-lab","text":"","title":"About this lab"},{"location":"about/#lab-introduction","text":"We\u2019d like to introduce you to a simple SD-WAN deployment: One single border router. In this lab the Viptela vManage, vSmart, vBond, and border router bring up sequence has already been completed. We have two hosts, a windows jumpbox and a linux host, that we\u2019ll leverage to provision our AWS account and execute our Ansible playbooks, respectively. We\u2019ve already deployed Ansible on the Linux host so we\u2019re ready to dive into two very unique scenarios.","title":"Lab Introduction"},{"location":"about/#lab-flow","text":"In this lab, you will follow the lab guide on the scenarios below: Scenario 1: We\u2019ll explore the topics of Viptela device vs feature templates, Explore Ansible roles, Jinja2 templates, modules, etc. We\u2019ll then leverage existing templates to reverse engineer the template structure to create our own! Scenario 2: Here we\u2019ll leverage a lab AWS environment to deploy Viptela\u2019s Cloud OnRamp for Multicloud using Ansible playbooks. While most (all) of the playbooks used in this section are URI post/get calls, the outcome of this scenario is a deeper understanding of the APIs/Config Options available & used during the OnRamp process.","title":"Lab Flow"},{"location":"about/#lab-access","text":"Below table provides the IP addresses and credentials for the devices used in this lab: Note: You are able to access all devices via SSH and GUI after AnyConnect into dCloud. There is no remote desktop or any jump server required to access the lab. If you don't have AnyConnect VPN Client installed, you can download AnyConnect from here https://developer.cisco.com/site/devnet/sandbox/anyconnect/","title":"Lab Access"},{"location":"appendix/","text":"Appendix Linux Commands sudo; escalated root privileges rm -r; removes a file/directory more; Reads a file nano; Easy to read text editor pwd; prints the working directory ls; Lists files and subdirectories in the current directory cd; change directory \u201ccd <directory name>\u201d cd ..; used to navigate back to the","title":"Appendix"},{"location":"appendix/#appendix","text":"","title":"Appendix"},{"location":"appendix/#linux-commands","text":"sudo; escalated root privileges rm -r; removes a file/directory more; Reads a file nano; Easy to read text editor pwd; prints the working directory ls; Lists files and subdirectories in the current directory cd; change directory \u201ccd <directory name>\u201d cd ..; used to navigate back to the","title":"Linux Commands"},{"location":"sc_2_cont_edu/","text":"Continue your education! BRKXAR-1000: Creating an Application-Optimized Secure Access Service Edge (SASE)-Enabled Architecture Kyle Barnes BRKXAR-2005: Segmentation Simplified: A Case Study of Meraki Adaptive Policy and Cisco TrustSec Praveen Poojary BRKXAR-2015: Extend the Enterprise to the Cloud: AWS Cloud integration with Enterprise SD-WAN Praveen Poojary LABDEV-1102: Secure-X Orchestrator (SXO) - Manifest simplicity and efficiency via automation Navin Suvarna LABDEV-2007: NSO - Developing Python and Template-Based Service Navin Suvarna","title":"Continue Your Education"},{"location":"sc_2_cont_edu/#continue-your-education","text":"BRKXAR-1000: Creating an Application-Optimized Secure Access Service Edge (SASE)-Enabled Architecture Kyle Barnes BRKXAR-2005: Segmentation Simplified: A Case Study of Meraki Adaptive Policy and Cisco TrustSec Praveen Poojary BRKXAR-2015: Extend the Enterprise to the Cloud: AWS Cloud integration with Enterprise SD-WAN Praveen Poojary LABDEV-1102: Secure-X Orchestrator (SXO) - Manifest simplicity and efficiency via automation Navin Suvarna LABDEV-2007: NSO - Developing Python and Template-Based Service Navin Suvarna","title":"Continue your education!"},{"location":"sc_2_step_1/","text":"Step 1: Review Viptela SD-WAN API documentation https://developer.cisco.com/docs/sdwan/ Most of the APIs used in this document in the 'multicloud' section. Before we can leverage ANY of the APIs we need to dig into the authentication section of the API documentation. REMINDER: Every data service API request begins with the following Base URI. https:// /dataservice","title":"Step 1: Review Viptela SD-WAN API documentation"},{"location":"sc_2_step_1/#step-1-review-viptela-sd-wan-api-documentation","text":"https://developer.cisco.com/docs/sdwan/ Most of the APIs used in this document in the 'multicloud' section. Before we can leverage ANY of the APIs we need to dig into the authentication section of the API documentation. REMINDER: Every data service API request begins with the following Base URI. https:// /dataservice","title":"Step 1: Review Viptela SD-WAN API documentation"},{"location":"sc_2_validation/","text":"Validation As mentioned at the beginning of Scenario 2, success for this Scenario is a validation of routing. One thing that we notated at the very beginning were the host VPCs present in AWS. There should have been two /16 subnets-one for each respective VPC: 10.0.0.0/16 & 10.1.0.0/16. Log into BR1-CEDGE8Kv. We\u2019re going to validate a couple of things. First, lets check the VRFs defined on this device. First, lets check the VRFs defined on this device. show vrf What VRFs do you see? We should observe that VPN 10 is defined. Why not VPN 20? VPN 10 is present because of a feature template (BR1-C8000v-VPN10) that is associated with the device template (BR1-C8000v) assigned to the device. Do we have BFD associated with the transit VPC devices? show sdwan bfd session We should see two BFD sessions from this device. Lastly, lets check the routing in VRF 10. show ip route vrf 10 We should see an OMP-learned route for the VPC prefix (either 10.0.0.0/16 or 10.1.0.0/16). Why don\u2019t we see both subnets? The intent we defined associating VPN 10 to the respective host VPC tag (VPN 10 to VPC Red) is how we associate the AWS VPCs to the SD-WAN VPNs. As a sanity check-what if we want the service VPN 10 to have access to the VPC associated with tag \u2018Blue\u2019 Does this require a template change? Does this require an intent change? Hint: It\u2019s the latter. Modify the Ansible playbook #4 so that VPN 10 has access to VPC \u2018Blue.\u2019 Perform the same verification as we did above-remember, the intent mapping takes a few minutes to perform. You\u2019re finished! But as the tongue-in-cheek image above indicates, there is no actual finish line when it comes to education. Hopefully this lab was insightful into the various capabilities available when it comes to Viptela SD-WAN automation using Ansible. If you found this lab insightful-Praveen, Navin, and Kyle all encourage you to please rate this lab. Not only do you get a free pair of socks with enough reviews, but it also allows us to return to deliver these sorts of labs.","title":"Validation"},{"location":"sc_2_validation/#validation","text":"As mentioned at the beginning of Scenario 2, success for this Scenario is a validation of routing. One thing that we notated at the very beginning were the host VPCs present in AWS. There should have been two /16 subnets-one for each respective VPC: 10.0.0.0/16 & 10.1.0.0/16. Log into BR1-CEDGE8Kv. We\u2019re going to validate a couple of things. First, lets check the VRFs defined on this device. First, lets check the VRFs defined on this device. show vrf What VRFs do you see? We should observe that VPN 10 is defined. Why not VPN 20? VPN 10 is present because of a feature template (BR1-C8000v-VPN10) that is associated with the device template (BR1-C8000v) assigned to the device. Do we have BFD associated with the transit VPC devices? show sdwan bfd session We should see two BFD sessions from this device. Lastly, lets check the routing in VRF 10. show ip route vrf 10 We should see an OMP-learned route for the VPC prefix (either 10.0.0.0/16 or 10.1.0.0/16). Why don\u2019t we see both subnets? The intent we defined associating VPN 10 to the respective host VPC tag (VPN 10 to VPC Red) is how we associate the AWS VPCs to the SD-WAN VPNs. As a sanity check-what if we want the service VPN 10 to have access to the VPC associated with tag \u2018Blue\u2019 Does this require a template change? Does this require an intent change? Hint: It\u2019s the latter. Modify the Ansible playbook #4 so that VPN 10 has access to VPC \u2018Blue.\u2019 Perform the same verification as we did above-remember, the intent mapping takes a few minutes to perform. You\u2019re finished! But as the tongue-in-cheek image above indicates, there is no actual finish line when it comes to education. Hopefully this lab was insightful into the various capabilities available when it comes to Viptela SD-WAN automation using Ansible. If you found this lab insightful-Praveen, Navin, and Kyle all encourage you to please rate this lab. Not only do you get a free pair of socks with enough reviews, but it also allows us to return to deliver these sorts of labs.","title":"Validation"},{"location":"scenario_2/","text":"Scenario 2 Welcome to Scenario 2! Here, we will walk step by step to understand EXACTLY what occurs when using the Onramp functionality within the Viptela SD-WAN solution. Firstly, why do I care about extending the SD-WAN fabric to AWS? Extending the SD-WAN fabric as close to the source/destination has the obvious benefit of maintaining segmentation (which VPNs (Virtual Private Networks) can connect to which host VPCs), but also it allows us to leverage capabilities like application aware routing to ensure we're using the BEST transit possible. Should I care about this, really? Are you asking this question because you already have a direct connect with AWS? Then no, this is useless information, and you can skip to the last page where we have a coupon for a free Shania Twain concert ticket! (Just kidding) You MIGHT care if you are not wanting to have to backhaul all your remote site application traffic through your point of AWS direct connect. Some/most customers leverage a direct connect in a main campus location, so this means that your remote sites must traverse the various transports available to get to the campus only to then use the direct connect to AWS. An alternative option is to use a direct internet connection so that your branch sites can get a direct (over the internet) path to the cloud-hosted application. Let us assume your branch site is already using a commercial internet circuit as one of its transports\u2026so why not cut out the middleman! Why am I using Ansible to do this? Can't I just use the GUI? Sure, but would you understand the SPECIFIC APIs OR the specific options available to extend the SD-WAN fabric? Furthermore, if you do not know ANYTHING (or very little) about Ansible, this session will leave you with an understanding of what could be possible. Just because you can does not mean you should. Because you can, means you should. (for fun) Navigate back to the Windows jumphost. The AWS instance should have been requested in the environment setup, but if you didn\u2019t already, please do so now. Reminder, this takes a few minutes to complete Click on \u2018Go to Account\u2019 Search for \u2018VPC\u2019 & click on it. Review the x2 VPCs that are present. Note: If you\u2019re not familiar with the concept of AWS VPCs, a VPC (or virtual private cloud) enables you to launch AWS resources into a virtual network that you've defined. This virtual network closely resembles a traditional network that you'd operate in your own data center, with the benefits of using the scalable infrastructure of AWS. The following diagram shows an example VPC. The VPC has one subnet in each of the Availability Zones in the Region. A typical VPC definition includes a network (10.0.0.0/16 in this image) that can then be subnetted into smaller networks (10.0.1.0/24 & 10.0.2.0/24). Note: There are two host VPCs in our lab environment. Success for Scenario 2 is deployment of Cloud OnRamp for Multicloud and validation that we\u2019ve associated specific VPNs to specific VPCs, which can be verified by the routes associated with the VPCs. Here we can see that the two host VPCs have a /16 address block associated with them. Step 1: Review Viptela SD-WAN API documentation https://developer.cisco.com/docs/sdwan/ Most of the APIs used in this document in the 'multicloud' section. Before we can leverage ANY of the APIs we need to dig into the authentication section of the API documentation. REMINDER: Every data service API request begins with the following Base URI. https:// /dataservice Step 2: Understand the Cloud OnRamp for Multicloud Process A. Associate Cloud account (see variable file that you\u2019ve updated) B. Cloud Global Settings C. Create cloud gateway D. Manage intent (via segmentation policies) Step 3A: Associate Cloud Account (Don\u2019t configure this via the GUI, just showing it for visibility) You can see here that the /Multicloud/accounts API is used to associate the cloud account. You can create and manage cloud accounts and configure global settings in Cisco vManage for AWS automation. You can create multiple accounts, pick a specific account for transit gateway, mark one or more accounts for transit VPC automation and use other accounts for host VPC discovery and connectivity. The multicloud dashboard supports AWS key and IAM role models for authentication. IAM roles only work for AWS cloud deployed Cisco vManage, as this requires special AWS AssumeRole functions. The cloudGatewayEnabled variable enables the account to deploy the cloud gateway solution (C8000v in the transit VPC + TGW). Step 3B: Cloud Global Settings Global settings enables you to set a configuration one time and repeat across regions and handle resource management globally (per cloud). The software image and instance size specified are used for instantiation of CSRs in the cloud as part of the cloud gateway. Global settings include: Software image: CSR software image used for creating cloud gateway. There are two available software types: BYOL (Bring your own license) or PAYG (Pay as you go). In today\u2019s lab we\u2019ll be using a BYOL image. Specifically, 17.09.02a will be the software image used. AWS Instance Size: CSR instance size used depending upon bandwidth requirements. Cloud Gateway Solution: The gateway solution used for AWS cloud. For example, transit gateway with transit VPC. IP subnet pool: IP subnet pool used for transit VPC creation across regions. Subnet pool can be customized per cloud gateway using custom settings option, if desired. Intra-Tag Communication: Allows or denies communication between the VPCs under the same tag. Default Route in Host VPCs: Default routes are automatically added to the main route table of the VPC that points to the transit gateway. Full Mesh of Transit VPCs: Setup a full mesh connectivity between TVPCs of cloud gateways in different regions so as to carry site to site traffic (through CSRs) over public cloud backbone. Site-to-Site Tunnel Encapsulation Type: The two options are GRE or IPsec Note: The above image depicts the Transit Gateway \u2013 VPN based (using TVPC) against Transit Gateway \u2013 Connect Based (using TVPC) options. What\u2019s the difference? One has IPsec and one has GRE? As mentioned in the image above, the connect option is the latest capability available (~2 years old). The choice for IPSec or GRE tunnels depends on customer requirements such as required bandwidth, security, use of public or private IP addresses for the tunnel endpoints. Regardless, both options allow the SD-WAN to be extended into the transit VPC. Note: As you can see, the softwareImageId is 17.05.01a-[product ID]. We\u2019ll use \u2018Cisco-C8K-17.09.02a-42cb6e93-8d9d-490b-a73c-e3e56077ffd1\u2019 in our request. Why? AMI version cannot exceed the vManage version. Since we\u2019re running 20.9 version of vManage in today\u2019s lab, we\u2019re going to use the 17.09.02a version. For today\u2019s lab, we\u2019ll also be using the Transit Gateway \u2013 VPN based (using TVPC) cloud gateway solution. Step 3C: Create cloud gateway AKA, where the magic happens! This is the step where the TGW & Transit VPC (C8000v devices) are deployed! What do we need to do in preparation for this step? 1. Log into your AWS console 2. Go to the AWS Marketplace Search for \u20188000v\u2019 In this lab setup this has already been performed, but a new deployment would require subscribing. Note: Take note that running EC2/infrastructure cost of running the VMs are NOT free. Also, the costs differ depending on the selected region. Select US West and then US East to compare the pricing differences. Validate permissions-In this lab setup this won\u2019t be an issue, but normal local administrator rights are insufficient. We specifically need the AmazonEC2FullAccess & AmazonVPCFullAccess permissions associated with the account you supplied on step 6A for the automation deployment to be successful. Note: This is a user group called Admins that we\u2019ve associated the privileges to. You may not have access to IAM as part of this lab but see the above image for demonstration purposes. Reminder, this is not necessarily a best practice, and you should be following a practice of least privilege and it is common to associate an account specifically for AWS<>vManage interconnect. Reviewing the screenshot above, we\u2019re going to ignore the settings section as these configurations are already present in our global config. This settings section is meant to override the global settings, should that be required. There is a field that we must populate, the UUID section, which will specify WHICH virtual devices we intent to deploy. Navigate to Configuration>Devices You can see a number of devices with \u2018Chassis Number\u2019 in the first column-these are the UUIDs. Copy/paste two UUIDs into your notepad for the deployment section. Navigate to Configuration>Templates Navigate to \u201cDevice Templates\u201d and take note of the \u201cAWS-cat8kv-multicloud\u201d template. A normal practice would be to click \u2018attach devices\u2019-we\u2019re going to use Ansible for this. This template will attach when the device comes online (when we configure the step within the OnRamp for Multicloud Create Cloud Gateway step) Step 3D: Manage intent (via segmentation policies) What? If I keep saying \u2018This is where the magic happens\u2019 .. This is where MORE magic happens! This is where we specifically define which SD-WAN VPNs can reach which AWS VPCs! Also, we can specify which VPC to VPC traffic we wish to permit. Within the GUI, this is a lot prettier and easier to understand. Note: Here you can see that VPN65530 can access the 5StarLab VPC & VPN10 can access the test VPC (bidirectionally). VPN 10 CANNOT access the 5StarLab VPC. Now that we understand the steps, reviewed what variables are needed, and have prepared our AWS environment, we\u2019re ready to get into Ansible! Step 4: Deployment We\u2019re going to be creating multiple ansible playbooks. Each playbook will perform a step in the process. You\u2019ll see the syntax for each of the playbooks have a similar beginning: \u2022 Hosts: Uses the host file to determine where to run the play against. We only have the IP address associated with vManage there. \u2022 Gather_facts: This is time saving step. We do not need to gather any information on the hosts in which the plays are run against so we skip those. \u2022 Connection: A normal Ansible play would use SSH and deploy a python script onto the host to execute. Since we are executing this on the Ansible control node we need to specify local. \u2022 Vars_files: In this space we must associate our pod specifics. Any variables unique to a pod will go here! \u2022 Get Cookie task: Before we can use any of the vManage APIs we first need to request a cookie (supplying the username/password). We\u2019ll use this cookie as a header in the subsequent API requests. \u2022 Get XSRF token task: Like the cookie, we\u2019ll need an XSRF token, or cross-site request forgery prevention token, which is required for most POST operations. This will also be used as a header in the POST requests. \u2022 The \u2018register\u2019 keyword stores the value of the specific task to be used in later tasks. Since registered variables are stored in memory, it\u2019s not possible to use them in future plays, and they are only available for the current playbook run. Associate Cloud account - name: Step 1; Apply AWS credentials hosts: vmanage gather_facts: no connection: local #ALL YOUR POD/AWS SPECIFICS GO HERE# vars_files: - /home/dcloud/python-viptela/external_vars.yml tasks: - name: Get Cookies ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/j_security_check method: POST body_format: form-urlencoded validate_certs: False body: j_username: \"{{ USERNAME }}\" j_password: \"{{ PASSWORD }}\" register: login - name: Output Cookie Info ansible.builtin.debug: var: login.cookies - name: Get XSRF ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/client/token method: GET body_format: json validate_certs: False return_content: true headers: Cookie: \"{{ login.cookies_string }}\" register: cookie_output - name: Cookie Output ansible.builtin.debug: var: cookie_output.content ########################################################################### - name: Apply info ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/multicloud/accounts method: POST body_format: json body: \"{\\\"cloudType\\\":\\\"AWS\\\",\\\"accountName\\\":\\\"{{AWS_Account_Name}}\\\",\\\"description\\\":\\\"{{Description}}\\\",\\\"awsKeyCredentials\\\":{\\\"apiKey\\\":\\\"{{AWS_Access_KEY}}\\\",\\\"secretKey\\\":\\\"{{AWS_Secret_KEY}}\\\"},\\\"cloudGatewayEnabled\\\":\\\"tru e\\\"}\" validate_certs: false headers: Cookie: \"{{ login.cookies_string }}\" X-XSRF-TOKEN: \"{{ cookie_output.content }}\" We can save this file and run it to validate that there are no issues found. The syntax to run the playbook is \u2018ansible-playbook \u2019. If we run the playbook as-is we should see something like the following: (Sorry for the small text, but green is good) What we can see here is that we\u2019re making a POST method call, with our cookie and XSRF token from earlier with a bunch of mess in the body format. This is a JSON text string of the following: { \"cloudType\": \"AWS\", \"accountName\": \"<whatever you have in your variable file>\", \"description\": \"<whatever you have in your variable file>\", \"awsKeyCredentials\": { \"apiKey\": \"<whatever you have in your variable file>\", \"secretKey\": \"<whatever you have in your variable file>\" }, \"cloudGatewayEnabled\": \"true\" } Note: We\u2019re lazy. You can use a JSON to text string formatter online. Copy/paste from the API documentation and then modify the values. We can confirm in the GUI if the account settings have been applied. Again, sorry for the small text, but validate in the Cloud Account Management section-it may require a refresh Cloud global settings Note: Understanding the product ID will be required for the global settings API. - name: Step 2; Apply Global Settings hosts: vmanage gather_facts: no connection: local #ALL YOUR POD/AWS SPECIFICS GO HERE# vars_files: - /home/dcloud/python-viptela/external_vars.yml tasks: - name: Get Cookies ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/j_security_check method: POST body_format: form-urlencoded validate_certs: False body: j_username: \"{{ USERNAME }}\" j_password: \"{{ PASSWORD }}\" register: login - name: Output Cookie Info ansible.builtin.debug: var: login.cookies - name: Get XSRF ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/client/token method: GET body_format: json validate_certs: False return_content: true headers: Cookie: \"{{ login.cookies_string }}\" register: cookie_output - name: Cookie Output ansible.builtin.debug: var: cookie_output.content ################################################################################## - name: Apply Global Settings ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/multicloud/settings/global method: POST body_format: json body: \"{\\\"cloudGatewaySolution\\\":\\\"tgw_tvpc\\\",\\\"cloudType\\\":\\\"AWS\\\",\\\"name\\\":\\\"{{AWS_Account_Name}}\\\",\\\"enableAutoCorrect\\\":true,\\\"enablePeriodicAudit\\\":true,\\\"softwareImageId\\\":\\\"Cisco-C8K-17.09.02a-42cb6e93-8d9d-490b-a73c-e3e56077ffd1\\\",\\\"instanceSize\\\":\\\"t3.medium\\\",\\\"intraTagComm\\\":true,\\\"ipSubnetPool\\\":\\\"192.168.100.0/24\\\",\\\"accountId\\\":\\\"{{AWS_Account_ID}}\\\",\\\"cgwBgpAsnOffset\\\":64520,\\\"mapTvpc\\\":true,\\\"programDefaultRoute\\\":true,\\\"region\\\":\\\"us-east-1\\\",\\\"tunnelType\\\":\\\"ipsec\\\"}\" validate_certs: false headers: Cookie: \"{{ login.cookies_string }}\" X-XSRF-TOKEN: \"{{ cookie_output.content }}\" Did we see all green? Verify in the vManage GUI global settings section! Discover Host Private Networks - name: Step 3; Discover AWS Host VPCs hosts: vmanage gather_facts: no connection: local #ALL YOUR POD/AWS SPECIFICS GO HERE# vars_files: - /home/dcloud/python-viptela/external_vars.yml tasks: - name: Get Cookies ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/j_security_check method: POST body_format: form-urlencoded validate_certs: False body: j_username: \"{{ USERNAME }}\" j_password: \"{{ PASSWORD }}\" register: login - name: Output Cookie Info ansible.builtin.debug: var: login.cookies - name: Get XSRF ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/client/token method: GET body_format: json validate_certs: False return_content: true headers: Cookie: \"{{ login.cookies_string }}\" register: cookie_output - name: Cookie Output ansible.builtin.debug: var: cookie_output.content ################################################################################## - name: Get Host VPCs ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/multicloud/hostvpc?cloudType=AWS method: GET body_format: json validate_certs: False return_content: true headers: Cookie: \"{{ login.cookies_string }}\" X-XSRF-TOKEN: \"{{ cookie_output.content }}\" register: VPC - name: Output VPCs ansible.builtin.debug: var: VPC.json.data - name: Save ansible.builtin.copy: content: \"{{ VPC.json.data }}\" dest: /home/dcloud/python-viptela/dest_file.json Note: Take the VPC IDs and add the values to your external_vars file. Verifying in the GUI, we should see the same output. Tag AWS Host VPCs - name: Step 4; Tag AWS Host VPCs hosts: vmanage gather_facts: no connection: local #ALL YOUR POD/AWS SPECIFICS GO HERE# vars_files: - /home/dcloud/python-viptela/external_vars.yml vars: jsondata: \"{{ lookup('file', 'dest_file.json') | from_json }}\" tasks: - name: Get Cookies ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/j_security_check method: POST body_format: form-urlencoded validate_certs: False body: j_username: \"{{ USERNAME }}\" j_password: \"{{ PASSWORD }}\" register: login - name: Output Cookie Info ansible.builtin.debug: var: login.cookies - name: Get XSRF ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/client/token method: GET body_format: json validate_certs: False return_content: true headers: Cookie: \"{{ login.cookies_string }}\" register: cookie_output - name: Cookie Output ansible.builtin.debug: var: cookie_output.content ########################################################################### - name: RED VPC ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/multicloud/hostvpc/tags?cloudType=AWS method: POST body_format: json body: \"{\\\"tagName\\\":\\\"Red\\\",\\\"interconnectTag\\\":false,\\\"hostVpcs\\\":[{\\\"accountId\\\":\\\"{{ AWS_Account_ID }}\\\",\\\"accountName\\\":\\\"{{ AWS_Account_Name }}\\\",\\\"region\\\":\\\"us-east-1\\\",\\\"cloudType\\\":\\\"AWS\\\",\\\"hostVpcId\\\":\\\"{{Host_VPC_1_ID}} \\\",\\\"hostVpcName\\\":\\\"test-vpc-1\\\"}]}\" validate_certs: false headers: Cookie: \"{{ login.cookies_string }}\" X-XSRF-TOKEN: \"{{ cookie_output.content }}\" - name: Print ansible.builtin.debug: msg: \"VPC {{Host_VPC_1_ID}} given the tag of Red\" - name: Sleep for 15 seconds and continue with play ansible.builtin.wait_for: timeout: 15 delegate_to: localhost - name: BLUE VPC ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/multicloud/hostvpc/tags?cloudType=AWS method: POST body_format: json body: \"{\\\"tagName\\\":\\\"Blue\\\",\\\"interconnectTag\\\":false,\\\"hostVpcs\\\":[{\\\"accountId\\\":\\\"{{ AWS_Account_ID }}\\\",\\\"accountName\\\":\\\"{{ AWS_Account_Name }}\\\",\\\"region\\\":\\\"us-east-1\\\",\\\"cloudType\\\":\\\"AWS\\\",\\\"hostVpcId\\\":\\\"{{Host_VPC_2_ID} }\\\",\\\"hostVpcName\\\":\\\"test-vpc-2\\\"}]}\" validate_certs: false headers: Cookie: \"{{ login.cookies_string }}\" X-XSRF-TOKEN: \"{{ cookie_output.content }}\" - name: Print ansible.builtin.debug: msg: \"VPC {{Host_VPC_2_ID}} given the tag of Blue\" Note: One thing you may note is the ansible.builtin.wait_for module. This is a module to delay the subsequent task for a defined amount of time. We\u2019ve specified a wait of 15 seconds as you\u2019d otherwise get an error trying to apply the Blue tag until the Red tag application is complete. Create Cloud Gateway Note: This step takes a few minutes to deploy. Before we can deploy our cloud routers, we first need to associate a template. We\u2019ll be using the default device template \u2018AWS-cat8kv-multicloud.\u2019 As mentioned in the section prior, this is done in the GUI at Configuration>Templates>Device Templates. But\u2026we\u2019re doing this in ansible. Recall task 8 from scenario 1-we\u2019re going to use the same role. We have a playbook called \u20185a_Attach_AWS_Template.yml\u2019 which should look very similar to \u201819_Attach_Device_Template.yml.\u2019 The main difference being the addition of another variable: \u201c/0/GigabitEthernet2//interface/tunnel-interface/color/value: default\u201d - name: Attach AWS Device Template hosts: all connection: local gather_facts: no vars_files: - /home/dcloud/python-viptela/external_vars.yml roles: - role: login tags: CL-2001,CL-2001:login - role: attach_device_template tags: lab2:attach vars: DeviceTemplateList: AWS-cat8kv-multicloud: - csv-deviceIP: \"-\" csv-status: \"complete\" csv-deviceId: \"{{ UUID_1 }}\" csv-host-name: \"-\" //system/host-name: \"AWS1\" //system/site-id: \"5\" //system/system-ip: \"2.2.2.1\" /0/GigabitEthernet2//interface/tunnel-interface/color/value: \"default\" - csv-deviceIP: \"-\" csv-status: \"complete\" csv-deviceId: \"{{ UUID_2 }}\" csv-host-name: \"-\" //system/host-name: \"AWS2\" //system/site-id: \"5\" //system/system-ip: \"2.2.2.2\" /0/GigabitEthernet2//interface/tunnel-interface/color/value: \"default\" Note: In this example we\u2019re going to reference the external_vars.yml file to use the pod-specific UUIDs. Execute this playbook. - name: Step 5; Create Cloud Gateway hosts: vmanage gather_facts: no connection: local #ALL YOUR POD/AWS SPECIFICS GO HERE# vars_files: - /home/dcloud/python-viptela/external_vars.yml vars: jsondata: \"{{ lookup('file', 'dest_file.json') | from_json }}\" tasks: - name: Get Cookies ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/j_security_check method: POST body_format: form-urlencoded validate_certs: False body: j_username: \"{{ USERNAME }}\" j_password: \"{{ PASSWORD }}\" register: login - name: Output Cookie Info ansible.builtin.debug: var: login.cookies - name: Get XSRF ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/client/token method: GET body_format: json validate_certs: False return_content: true headers: Cookie: \"{{ login.cookies_string }}\" register: cookie_output - name: Cookie Output ansible.builtin.debug: var: cookie_output.content ################################################################################## - name: Deploy CGW ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/multicloud/cloudgateway method: POST body_format: json validate_certs: False body: \"{\\\"accountId\\\":\\\"{{AWS_Account_ID}}\\\",\\\"cloudType\\\":\\\"AWS\\\",\\\"region\\\":\\\"us-east-1\\\",\\\"cloudGatewayName\\\":\\\"CL2023_CGW\\\",\\\"devices\\\":[\\\"{{UUID_1}}\\\",\\\"{{UUID_2}}\\\"],\\\"description\\\":\\\"\\\"}\" headers: Cookie: \"{{ login.cookies_string }}\" X-XSRF-TOKEN: \"{{ cookie_output.content }}\" register: results Configuration>Templates Note: We can see here that the two cloud routers have the AWS template assigned (attached). Manage Intent - name: Step 6; Manage Intent hosts: vmanage gather_facts: no connection: local #ALL YOUR POD/AWS SPECIFICS GO HERE# vars_files: - /home/dcloud/python-viptela/external_vars.yml vars: jsondata: \"{{ lookup('file', 'dest_file.json') | from_json }}\" tasks: - name: Get Cookies ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/j_security_check method: POST body_format: form-urlencoded validate_certs: False body: j_username: \"{{ USERNAME }}\" j_password: \"{{ PASSWORD }}\" register: login - name: Output Cookie Info ansible.builtin.debug: var: login.cookies - name: Get XSRF ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/client/token method: GET body_format: json validate_certs: False return_content: true headers: Cookie: \"{{ login.cookies_string }}\" register: cookie_output - name: Cookie Output ansible.builtin.debug: var: cookie_output.content ################################################################################## - name: Manage Intent ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/multicloud/map?cloudType=AWS method: POST body_format: json validate_certs: False body: \"{\\\"cloudType\\\":\\\"AWS\\\",\\\"connMatrix\\\":[{\\\"srcType\\\":\\\"vpn\\\",\\\"srcId\\\":\\\"10\\\",\\\"conn\\\":\\\"enabled\\\",\\\"destId\\\":\\\"Red\\\",\\\"destType\\\":\\\"tag\\\"},{\\\"srcType\\\":\\\"tag\\\",\\\"srcId\\\":\\\"Red\\\",\\\"conn\\\":\\\"enabled\\\",\\\"destId\\\":\\\"10\\\",\\\"destT ype\\\":\\\"vpn\\\"}]}\" headers: Cookie: \"{{ login.cookies_string }}\" X-XSRF-TOKEN: \"{{ cookie_output.content }}\" Note: AWS cloud operations can take up to 40-60 mins to complete mapping the intent management. In our experience testing this lab, it takes around 5-10 minutes to get to an \u2018all green\u2019 state: Once you see all green it indicates the TVPC C8000vs are reachable and that there are IPsec tunnels established to the TGW. Proceed to validation.","title":"Scenario 2"},{"location":"scenario_2/#scenario-2","text":"Welcome to Scenario 2! Here, we will walk step by step to understand EXACTLY what occurs when using the Onramp functionality within the Viptela SD-WAN solution. Firstly, why do I care about extending the SD-WAN fabric to AWS? Extending the SD-WAN fabric as close to the source/destination has the obvious benefit of maintaining segmentation (which VPNs (Virtual Private Networks) can connect to which host VPCs), but also it allows us to leverage capabilities like application aware routing to ensure we're using the BEST transit possible. Should I care about this, really? Are you asking this question because you already have a direct connect with AWS? Then no, this is useless information, and you can skip to the last page where we have a coupon for a free Shania Twain concert ticket! (Just kidding) You MIGHT care if you are not wanting to have to backhaul all your remote site application traffic through your point of AWS direct connect. Some/most customers leverage a direct connect in a main campus location, so this means that your remote sites must traverse the various transports available to get to the campus only to then use the direct connect to AWS. An alternative option is to use a direct internet connection so that your branch sites can get a direct (over the internet) path to the cloud-hosted application. Let us assume your branch site is already using a commercial internet circuit as one of its transports\u2026so why not cut out the middleman! Why am I using Ansible to do this? Can't I just use the GUI? Sure, but would you understand the SPECIFIC APIs OR the specific options available to extend the SD-WAN fabric? Furthermore, if you do not know ANYTHING (or very little) about Ansible, this session will leave you with an understanding of what could be possible. Just because you can does not mean you should. Because you can, means you should. (for fun) Navigate back to the Windows jumphost. The AWS instance should have been requested in the environment setup, but if you didn\u2019t already, please do so now. Reminder, this takes a few minutes to complete Click on \u2018Go to Account\u2019 Search for \u2018VPC\u2019 & click on it. Review the x2 VPCs that are present. Note: If you\u2019re not familiar with the concept of AWS VPCs, a VPC (or virtual private cloud) enables you to launch AWS resources into a virtual network that you've defined. This virtual network closely resembles a traditional network that you'd operate in your own data center, with the benefits of using the scalable infrastructure of AWS. The following diagram shows an example VPC. The VPC has one subnet in each of the Availability Zones in the Region. A typical VPC definition includes a network (10.0.0.0/16 in this image) that can then be subnetted into smaller networks (10.0.1.0/24 & 10.0.2.0/24). Note: There are two host VPCs in our lab environment. Success for Scenario 2 is deployment of Cloud OnRamp for Multicloud and validation that we\u2019ve associated specific VPNs to specific VPCs, which can be verified by the routes associated with the VPCs. Here we can see that the two host VPCs have a /16 address block associated with them.","title":"Scenario 2"},{"location":"scenario_2/#step-1-review-viptela-sd-wan-api-documentation","text":"https://developer.cisco.com/docs/sdwan/ Most of the APIs used in this document in the 'multicloud' section. Before we can leverage ANY of the APIs we need to dig into the authentication section of the API documentation. REMINDER: Every data service API request begins with the following Base URI. https:// /dataservice","title":"Step 1: Review Viptela SD-WAN API documentation"},{"location":"scenario_2/#step-2-understand-the-cloud-onramp-for-multicloud-process","text":"A. Associate Cloud account (see variable file that you\u2019ve updated) B. Cloud Global Settings C. Create cloud gateway D. Manage intent (via segmentation policies)","title":"Step 2: Understand the Cloud OnRamp for Multicloud Process"},{"location":"scenario_2/#step-3a-associate-cloud-account","text":"(Don\u2019t configure this via the GUI, just showing it for visibility) You can see here that the /Multicloud/accounts API is used to associate the cloud account. You can create and manage cloud accounts and configure global settings in Cisco vManage for AWS automation. You can create multiple accounts, pick a specific account for transit gateway, mark one or more accounts for transit VPC automation and use other accounts for host VPC discovery and connectivity. The multicloud dashboard supports AWS key and IAM role models for authentication. IAM roles only work for AWS cloud deployed Cisco vManage, as this requires special AWS AssumeRole functions. The cloudGatewayEnabled variable enables the account to deploy the cloud gateway solution (C8000v in the transit VPC + TGW).","title":"Step 3A: Associate Cloud Account"},{"location":"scenario_2/#step-3b-cloud-global-settings","text":"Global settings enables you to set a configuration one time and repeat across regions and handle resource management globally (per cloud). The software image and instance size specified are used for instantiation of CSRs in the cloud as part of the cloud gateway. Global settings include: Software image: CSR software image used for creating cloud gateway. There are two available software types: BYOL (Bring your own license) or PAYG (Pay as you go). In today\u2019s lab we\u2019ll be using a BYOL image. Specifically, 17.09.02a will be the software image used. AWS Instance Size: CSR instance size used depending upon bandwidth requirements. Cloud Gateway Solution: The gateway solution used for AWS cloud. For example, transit gateway with transit VPC. IP subnet pool: IP subnet pool used for transit VPC creation across regions. Subnet pool can be customized per cloud gateway using custom settings option, if desired. Intra-Tag Communication: Allows or denies communication between the VPCs under the same tag. Default Route in Host VPCs: Default routes are automatically added to the main route table of the VPC that points to the transit gateway. Full Mesh of Transit VPCs: Setup a full mesh connectivity between TVPCs of cloud gateways in different regions so as to carry site to site traffic (through CSRs) over public cloud backbone. Site-to-Site Tunnel Encapsulation Type: The two options are GRE or IPsec Note: The above image depicts the Transit Gateway \u2013 VPN based (using TVPC) against Transit Gateway \u2013 Connect Based (using TVPC) options. What\u2019s the difference? One has IPsec and one has GRE? As mentioned in the image above, the connect option is the latest capability available (~2 years old). The choice for IPSec or GRE tunnels depends on customer requirements such as required bandwidth, security, use of public or private IP addresses for the tunnel endpoints. Regardless, both options allow the SD-WAN to be extended into the transit VPC. Note: As you can see, the softwareImageId is 17.05.01a-[product ID]. We\u2019ll use \u2018Cisco-C8K-17.09.02a-42cb6e93-8d9d-490b-a73c-e3e56077ffd1\u2019 in our request. Why? AMI version cannot exceed the vManage version. Since we\u2019re running 20.9 version of vManage in today\u2019s lab, we\u2019re going to use the 17.09.02a version. For today\u2019s lab, we\u2019ll also be using the Transit Gateway \u2013 VPN based (using TVPC) cloud gateway solution.","title":"Step 3B: Cloud Global Settings"},{"location":"scenario_2/#step-3c-create-cloud-gateway","text":"AKA, where the magic happens! This is the step where the TGW & Transit VPC (C8000v devices) are deployed! What do we need to do in preparation for this step? 1. Log into your AWS console 2. Go to the AWS Marketplace Search for \u20188000v\u2019 In this lab setup this has already been performed, but a new deployment would require subscribing. Note: Take note that running EC2/infrastructure cost of running the VMs are NOT free. Also, the costs differ depending on the selected region. Select US West and then US East to compare the pricing differences. Validate permissions-In this lab setup this won\u2019t be an issue, but normal local administrator rights are insufficient. We specifically need the AmazonEC2FullAccess & AmazonVPCFullAccess permissions associated with the account you supplied on step 6A for the automation deployment to be successful. Note: This is a user group called Admins that we\u2019ve associated the privileges to. You may not have access to IAM as part of this lab but see the above image for demonstration purposes. Reminder, this is not necessarily a best practice, and you should be following a practice of least privilege and it is common to associate an account specifically for AWS<>vManage interconnect. Reviewing the screenshot above, we\u2019re going to ignore the settings section as these configurations are already present in our global config. This settings section is meant to override the global settings, should that be required. There is a field that we must populate, the UUID section, which will specify WHICH virtual devices we intent to deploy. Navigate to Configuration>Devices You can see a number of devices with \u2018Chassis Number\u2019 in the first column-these are the UUIDs. Copy/paste two UUIDs into your notepad for the deployment section. Navigate to Configuration>Templates Navigate to \u201cDevice Templates\u201d and take note of the \u201cAWS-cat8kv-multicloud\u201d template. A normal practice would be to click \u2018attach devices\u2019-we\u2019re going to use Ansible for this. This template will attach when the device comes online (when we configure the step within the OnRamp for Multicloud Create Cloud Gateway step)","title":"Step 3C: Create cloud gateway"},{"location":"scenario_2/#step-3d-manage-intent-via-segmentation-policies","text":"What? If I keep saying \u2018This is where the magic happens\u2019 .. This is where MORE magic happens! This is where we specifically define which SD-WAN VPNs can reach which AWS VPCs! Also, we can specify which VPC to VPC traffic we wish to permit. Within the GUI, this is a lot prettier and easier to understand. Note: Here you can see that VPN65530 can access the 5StarLab VPC & VPN10 can access the test VPC (bidirectionally). VPN 10 CANNOT access the 5StarLab VPC. Now that we understand the steps, reviewed what variables are needed, and have prepared our AWS environment, we\u2019re ready to get into Ansible!","title":"Step 3D: Manage intent (via segmentation policies)"},{"location":"scenario_2/#step-4-deployment","text":"We\u2019re going to be creating multiple ansible playbooks. Each playbook will perform a step in the process. You\u2019ll see the syntax for each of the playbooks have a similar beginning: \u2022 Hosts: Uses the host file to determine where to run the play against. We only have the IP address associated with vManage there. \u2022 Gather_facts: This is time saving step. We do not need to gather any information on the hosts in which the plays are run against so we skip those. \u2022 Connection: A normal Ansible play would use SSH and deploy a python script onto the host to execute. Since we are executing this on the Ansible control node we need to specify local. \u2022 Vars_files: In this space we must associate our pod specifics. Any variables unique to a pod will go here! \u2022 Get Cookie task: Before we can use any of the vManage APIs we first need to request a cookie (supplying the username/password). We\u2019ll use this cookie as a header in the subsequent API requests. \u2022 Get XSRF token task: Like the cookie, we\u2019ll need an XSRF token, or cross-site request forgery prevention token, which is required for most POST operations. This will also be used as a header in the POST requests. \u2022 The \u2018register\u2019 keyword stores the value of the specific task to be used in later tasks. Since registered variables are stored in memory, it\u2019s not possible to use them in future plays, and they are only available for the current playbook run.","title":"Step 4: Deployment"},{"location":"scenario_2/#associate-cloud-account","text":"- name: Step 1; Apply AWS credentials hosts: vmanage gather_facts: no connection: local #ALL YOUR POD/AWS SPECIFICS GO HERE# vars_files: - /home/dcloud/python-viptela/external_vars.yml tasks: - name: Get Cookies ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/j_security_check method: POST body_format: form-urlencoded validate_certs: False body: j_username: \"{{ USERNAME }}\" j_password: \"{{ PASSWORD }}\" register: login - name: Output Cookie Info ansible.builtin.debug: var: login.cookies - name: Get XSRF ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/client/token method: GET body_format: json validate_certs: False return_content: true headers: Cookie: \"{{ login.cookies_string }}\" register: cookie_output - name: Cookie Output ansible.builtin.debug: var: cookie_output.content ########################################################################### - name: Apply info ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/multicloud/accounts method: POST body_format: json body: \"{\\\"cloudType\\\":\\\"AWS\\\",\\\"accountName\\\":\\\"{{AWS_Account_Name}}\\\",\\\"description\\\":\\\"{{Description}}\\\",\\\"awsKeyCredentials\\\":{\\\"apiKey\\\":\\\"{{AWS_Access_KEY}}\\\",\\\"secretKey\\\":\\\"{{AWS_Secret_KEY}}\\\"},\\\"cloudGatewayEnabled\\\":\\\"tru e\\\"}\" validate_certs: false headers: Cookie: \"{{ login.cookies_string }}\" X-XSRF-TOKEN: \"{{ cookie_output.content }}\" We can save this file and run it to validate that there are no issues found. The syntax to run the playbook is \u2018ansible-playbook \u2019. If we run the playbook as-is we should see something like the following: (Sorry for the small text, but green is good) What we can see here is that we\u2019re making a POST method call, with our cookie and XSRF token from earlier with a bunch of mess in the body format. This is a JSON text string of the following: { \"cloudType\": \"AWS\", \"accountName\": \"<whatever you have in your variable file>\", \"description\": \"<whatever you have in your variable file>\", \"awsKeyCredentials\": { \"apiKey\": \"<whatever you have in your variable file>\", \"secretKey\": \"<whatever you have in your variable file>\" }, \"cloudGatewayEnabled\": \"true\" } Note: We\u2019re lazy. You can use a JSON to text string formatter online. Copy/paste from the API documentation and then modify the values. We can confirm in the GUI if the account settings have been applied. Again, sorry for the small text, but validate in the Cloud Account Management section-it may require a refresh","title":"Associate Cloud account"},{"location":"scenario_2/#cloud-global-settings","text":"Note: Understanding the product ID will be required for the global settings API. - name: Step 2; Apply Global Settings hosts: vmanage gather_facts: no connection: local #ALL YOUR POD/AWS SPECIFICS GO HERE# vars_files: - /home/dcloud/python-viptela/external_vars.yml tasks: - name: Get Cookies ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/j_security_check method: POST body_format: form-urlencoded validate_certs: False body: j_username: \"{{ USERNAME }}\" j_password: \"{{ PASSWORD }}\" register: login - name: Output Cookie Info ansible.builtin.debug: var: login.cookies - name: Get XSRF ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/client/token method: GET body_format: json validate_certs: False return_content: true headers: Cookie: \"{{ login.cookies_string }}\" register: cookie_output - name: Cookie Output ansible.builtin.debug: var: cookie_output.content ################################################################################## - name: Apply Global Settings ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/multicloud/settings/global method: POST body_format: json body: \"{\\\"cloudGatewaySolution\\\":\\\"tgw_tvpc\\\",\\\"cloudType\\\":\\\"AWS\\\",\\\"name\\\":\\\"{{AWS_Account_Name}}\\\",\\\"enableAutoCorrect\\\":true,\\\"enablePeriodicAudit\\\":true,\\\"softwareImageId\\\":\\\"Cisco-C8K-17.09.02a-42cb6e93-8d9d-490b-a73c-e3e56077ffd1\\\",\\\"instanceSize\\\":\\\"t3.medium\\\",\\\"intraTagComm\\\":true,\\\"ipSubnetPool\\\":\\\"192.168.100.0/24\\\",\\\"accountId\\\":\\\"{{AWS_Account_ID}}\\\",\\\"cgwBgpAsnOffset\\\":64520,\\\"mapTvpc\\\":true,\\\"programDefaultRoute\\\":true,\\\"region\\\":\\\"us-east-1\\\",\\\"tunnelType\\\":\\\"ipsec\\\"}\" validate_certs: false headers: Cookie: \"{{ login.cookies_string }}\" X-XSRF-TOKEN: \"{{ cookie_output.content }}\" Did we see all green? Verify in the vManage GUI global settings section!","title":"Cloud global settings"},{"location":"scenario_2/#discover-host-private-networks","text":"- name: Step 3; Discover AWS Host VPCs hosts: vmanage gather_facts: no connection: local #ALL YOUR POD/AWS SPECIFICS GO HERE# vars_files: - /home/dcloud/python-viptela/external_vars.yml tasks: - name: Get Cookies ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/j_security_check method: POST body_format: form-urlencoded validate_certs: False body: j_username: \"{{ USERNAME }}\" j_password: \"{{ PASSWORD }}\" register: login - name: Output Cookie Info ansible.builtin.debug: var: login.cookies - name: Get XSRF ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/client/token method: GET body_format: json validate_certs: False return_content: true headers: Cookie: \"{{ login.cookies_string }}\" register: cookie_output - name: Cookie Output ansible.builtin.debug: var: cookie_output.content ################################################################################## - name: Get Host VPCs ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/multicloud/hostvpc?cloudType=AWS method: GET body_format: json validate_certs: False return_content: true headers: Cookie: \"{{ login.cookies_string }}\" X-XSRF-TOKEN: \"{{ cookie_output.content }}\" register: VPC - name: Output VPCs ansible.builtin.debug: var: VPC.json.data - name: Save ansible.builtin.copy: content: \"{{ VPC.json.data }}\" dest: /home/dcloud/python-viptela/dest_file.json Note: Take the VPC IDs and add the values to your external_vars file. Verifying in the GUI, we should see the same output.","title":"Discover Host Private Networks"},{"location":"scenario_2/#tag-aws-host-vpcs","text":"- name: Step 4; Tag AWS Host VPCs hosts: vmanage gather_facts: no connection: local #ALL YOUR POD/AWS SPECIFICS GO HERE# vars_files: - /home/dcloud/python-viptela/external_vars.yml vars: jsondata: \"{{ lookup('file', 'dest_file.json') | from_json }}\" tasks: - name: Get Cookies ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/j_security_check method: POST body_format: form-urlencoded validate_certs: False body: j_username: \"{{ USERNAME }}\" j_password: \"{{ PASSWORD }}\" register: login - name: Output Cookie Info ansible.builtin.debug: var: login.cookies - name: Get XSRF ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/client/token method: GET body_format: json validate_certs: False return_content: true headers: Cookie: \"{{ login.cookies_string }}\" register: cookie_output - name: Cookie Output ansible.builtin.debug: var: cookie_output.content ########################################################################### - name: RED VPC ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/multicloud/hostvpc/tags?cloudType=AWS method: POST body_format: json body: \"{\\\"tagName\\\":\\\"Red\\\",\\\"interconnectTag\\\":false,\\\"hostVpcs\\\":[{\\\"accountId\\\":\\\"{{ AWS_Account_ID }}\\\",\\\"accountName\\\":\\\"{{ AWS_Account_Name }}\\\",\\\"region\\\":\\\"us-east-1\\\",\\\"cloudType\\\":\\\"AWS\\\",\\\"hostVpcId\\\":\\\"{{Host_VPC_1_ID}} \\\",\\\"hostVpcName\\\":\\\"test-vpc-1\\\"}]}\" validate_certs: false headers: Cookie: \"{{ login.cookies_string }}\" X-XSRF-TOKEN: \"{{ cookie_output.content }}\" - name: Print ansible.builtin.debug: msg: \"VPC {{Host_VPC_1_ID}} given the tag of Red\" - name: Sleep for 15 seconds and continue with play ansible.builtin.wait_for: timeout: 15 delegate_to: localhost - name: BLUE VPC ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/multicloud/hostvpc/tags?cloudType=AWS method: POST body_format: json body: \"{\\\"tagName\\\":\\\"Blue\\\",\\\"interconnectTag\\\":false,\\\"hostVpcs\\\":[{\\\"accountId\\\":\\\"{{ AWS_Account_ID }}\\\",\\\"accountName\\\":\\\"{{ AWS_Account_Name }}\\\",\\\"region\\\":\\\"us-east-1\\\",\\\"cloudType\\\":\\\"AWS\\\",\\\"hostVpcId\\\":\\\"{{Host_VPC_2_ID} }\\\",\\\"hostVpcName\\\":\\\"test-vpc-2\\\"}]}\" validate_certs: false headers: Cookie: \"{{ login.cookies_string }}\" X-XSRF-TOKEN: \"{{ cookie_output.content }}\" - name: Print ansible.builtin.debug: msg: \"VPC {{Host_VPC_2_ID}} given the tag of Blue\" Note: One thing you may note is the ansible.builtin.wait_for module. This is a module to delay the subsequent task for a defined amount of time. We\u2019ve specified a wait of 15 seconds as you\u2019d otherwise get an error trying to apply the Blue tag until the Red tag application is complete.","title":"Tag AWS Host VPCs"},{"location":"scenario_2/#create-cloud-gateway","text":"Note: This step takes a few minutes to deploy. Before we can deploy our cloud routers, we first need to associate a template. We\u2019ll be using the default device template \u2018AWS-cat8kv-multicloud.\u2019 As mentioned in the section prior, this is done in the GUI at Configuration>Templates>Device Templates. But\u2026we\u2019re doing this in ansible. Recall task 8 from scenario 1-we\u2019re going to use the same role. We have a playbook called \u20185a_Attach_AWS_Template.yml\u2019 which should look very similar to \u201819_Attach_Device_Template.yml.\u2019 The main difference being the addition of another variable: \u201c/0/GigabitEthernet2//interface/tunnel-interface/color/value: default\u201d - name: Attach AWS Device Template hosts: all connection: local gather_facts: no vars_files: - /home/dcloud/python-viptela/external_vars.yml roles: - role: login tags: CL-2001,CL-2001:login - role: attach_device_template tags: lab2:attach vars: DeviceTemplateList: AWS-cat8kv-multicloud: - csv-deviceIP: \"-\" csv-status: \"complete\" csv-deviceId: \"{{ UUID_1 }}\" csv-host-name: \"-\" //system/host-name: \"AWS1\" //system/site-id: \"5\" //system/system-ip: \"2.2.2.1\" /0/GigabitEthernet2//interface/tunnel-interface/color/value: \"default\" - csv-deviceIP: \"-\" csv-status: \"complete\" csv-deviceId: \"{{ UUID_2 }}\" csv-host-name: \"-\" //system/host-name: \"AWS2\" //system/site-id: \"5\" //system/system-ip: \"2.2.2.2\" /0/GigabitEthernet2//interface/tunnel-interface/color/value: \"default\" Note: In this example we\u2019re going to reference the external_vars.yml file to use the pod-specific UUIDs. Execute this playbook. - name: Step 5; Create Cloud Gateway hosts: vmanage gather_facts: no connection: local #ALL YOUR POD/AWS SPECIFICS GO HERE# vars_files: - /home/dcloud/python-viptela/external_vars.yml vars: jsondata: \"{{ lookup('file', 'dest_file.json') | from_json }}\" tasks: - name: Get Cookies ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/j_security_check method: POST body_format: form-urlencoded validate_certs: False body: j_username: \"{{ USERNAME }}\" j_password: \"{{ PASSWORD }}\" register: login - name: Output Cookie Info ansible.builtin.debug: var: login.cookies - name: Get XSRF ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/client/token method: GET body_format: json validate_certs: False return_content: true headers: Cookie: \"{{ login.cookies_string }}\" register: cookie_output - name: Cookie Output ansible.builtin.debug: var: cookie_output.content ################################################################################## - name: Deploy CGW ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/multicloud/cloudgateway method: POST body_format: json validate_certs: False body: \"{\\\"accountId\\\":\\\"{{AWS_Account_ID}}\\\",\\\"cloudType\\\":\\\"AWS\\\",\\\"region\\\":\\\"us-east-1\\\",\\\"cloudGatewayName\\\":\\\"CL2023_CGW\\\",\\\"devices\\\":[\\\"{{UUID_1}}\\\",\\\"{{UUID_2}}\\\"],\\\"description\\\":\\\"\\\"}\" headers: Cookie: \"{{ login.cookies_string }}\" X-XSRF-TOKEN: \"{{ cookie_output.content }}\" register: results Configuration>Templates Note: We can see here that the two cloud routers have the AWS template assigned (attached).","title":"Create Cloud Gateway"},{"location":"scenario_2/#manage-intent","text":"- name: Step 6; Manage Intent hosts: vmanage gather_facts: no connection: local #ALL YOUR POD/AWS SPECIFICS GO HERE# vars_files: - /home/dcloud/python-viptela/external_vars.yml vars: jsondata: \"{{ lookup('file', 'dest_file.json') | from_json }}\" tasks: - name: Get Cookies ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/j_security_check method: POST body_format: form-urlencoded validate_certs: False body: j_username: \"{{ USERNAME }}\" j_password: \"{{ PASSWORD }}\" register: login - name: Output Cookie Info ansible.builtin.debug: var: login.cookies - name: Get XSRF ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/client/token method: GET body_format: json validate_certs: False return_content: true headers: Cookie: \"{{ login.cookies_string }}\" register: cookie_output - name: Cookie Output ansible.builtin.debug: var: cookie_output.content ################################################################################## - name: Manage Intent ansible.builtin.uri: url: https://{{ VMANAGE_IP }}/dataservice/multicloud/map?cloudType=AWS method: POST body_format: json validate_certs: False body: \"{\\\"cloudType\\\":\\\"AWS\\\",\\\"connMatrix\\\":[{\\\"srcType\\\":\\\"vpn\\\",\\\"srcId\\\":\\\"10\\\",\\\"conn\\\":\\\"enabled\\\",\\\"destId\\\":\\\"Red\\\",\\\"destType\\\":\\\"tag\\\"},{\\\"srcType\\\":\\\"tag\\\",\\\"srcId\\\":\\\"Red\\\",\\\"conn\\\":\\\"enabled\\\",\\\"destId\\\":\\\"10\\\",\\\"destT ype\\\":\\\"vpn\\\"}]}\" headers: Cookie: \"{{ login.cookies_string }}\" X-XSRF-TOKEN: \"{{ cookie_output.content }}\" Note: AWS cloud operations can take up to 40-60 mins to complete mapping the intent management. In our experience testing this lab, it takes around 5-10 minutes to get to an \u2018all green\u2019 state: Once you see all green it indicates the TVPC C8000vs are reachable and that there are IPsec tunnels established to the TGW. Proceed to validation.","title":"Manage Intent"}]}